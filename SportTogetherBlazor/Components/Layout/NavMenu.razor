@inherits LayoutComponentBase
@using SportTogetherBlazor.Services
@using SportTogetherBlazor.Models
@inject NavigationManager NavigationManager
@inject LocalStorageServices localStorage
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject TaskNotificationServices NotificationService


<!-- Normal Menu for larger screens -->
<div class="d-none d-md-flex bg-dark position-sticky flex-column" id="sideMenu">
    <div class="d-flex flex-column flex-shrink-0 p-3 text-white flex-grow-1">
        <div class="row align-items-center justify-content-between">
            <!-- Logo à gauche -->
            <a href="/SportTogether" class="d-flex justify-content-center align-content-center mb-3 mb-md-0 me-md-auto">
                <img src="images/logo-blanc.png" class="img-fluid align-self-center p-1" style="width:80px; height:80px;" />
            </a>
            <br>
            <!-- Bouton de notification à droite -->
            <div class="d-flex justify-content-center align-items-center">
                <Button Color="ButtonColor.Light" @onclick="OnShowModalClick" Size="Size.Medium">
                    <Icon Name="IconName.BellFill" />
                    @if (listNotif.Any(n => !n.Vu))
                    {
                        <Badge Color="BadgeColor.Danger">@listNotif.Count(n => !n.Vu)</Badge>
                    }
                </Button>
            </div>
        </div>
       
        <hr>
        <ul class="nav nav-pills flex-column mb-auto">
            <li class="nav-item h-auto">
                <a href="/SportTogether/Fil-D-Actualite/@userSession" class="nav-link text-white text-center text-capitalize">
                    <Icon Name="IconName.BookHalf" Color="IconColor.Light" Size="IconSize.x4" class="p-2" />
                    Fil d'actualité
                </a>
            </li>
            <li class="nav-item h-auto " >
                <a href="/SportTogether/Annonces/@userSession" class="nav-link text-white text-center text-capitalize">
                    <Icon Name="IconName.House" Color="IconColor.Light" Size="IconSize.x4" class="p-2" />
                    Annonces
                </a>
            </li>
            <li class="nav-item h-auto " >
                <a href="/SportTogether/Messagerie-instantane/@userSession" class="nav-link text-white text-center text-capitalize">
                    <Icon Name="IconName.Messenger" Color="IconColor.Light" Size="IconSize.x4" class="p-2" />
                    Messagerie
                    @if (messageCount)
                    {
                        <span class="ms-3"><Badge Color="BadgeColor.Danger" Placement="BadgePlacement.MiddleRight">@nbrMessages</Badge></span>
                    }
                </a>
            </li>
            <li class="nav-item h-auto " >
                <a href="/SportTogether/Mes-annonces/@userSession" class="nav-link text-white text-center text-capitalize">
                    <Icon Name="IconName.Calendar2Week" Color="IconColor.Light" Size="IconSize.x4" class="p-2" />
                    Mes annonces
                </a>
            </li>

        </ul>
      
        <div class="dropdown mt-auto">
            <hr>
            <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
                @if (utilisateurInfo != null)
                {
                    <img src="@urlPhotoProfil" alt="" width="32" height="32" class="rounded-circle me-2">
                    <strong>@utilisateurInfo.Pseudo</strong>
                }
                
            </a>
            <ul class="dropdown-menu dropdown-menu-dark text-small shadow" aria-labelledby="dropdownUser1">
                <li><a class="dropdown-item" href="/SportTogether/Parametre">Paramètre</a></li>
                <li><a class="dropdown-item" href="/SportTogether/Profil-utilisateur/@userSession">Profil</a></li>
                <li><a class="dropdown-item" @onclick="Logout">Se déconnecter</a></li>
            </ul>
        </div>
    </div>
</div>
<!-- Bottom navigation for mobile and medium screens -->
<nav class="navbar navbar-dark bg-dark d-lg-none d-md-none sticky-top ">
    <div class="container ">
        <div class="row justify-content-between">
            <!-- Left side: nav items (Centered) -->
            <div class="col-6">
                <ul class="navbar-nav flex-row ">
                    <li class="nav-item-mb text-center  h-auto " >
                        <a href="/SportTogether/Fil-D-Actualite/@userSession" class="nav-link-mb " >
                            <Icon Name="IconName.BookHalf" Color="IconColor.Light" />
                        </a>
                    </li>
                    <li class="nav-item-mb text-center  h-auto ">
                        <a href="/SportTogether/Annonces/@userSession" class="nav-link-mb " >
                            <Icon Name="IconName.House" Color="IconColor.Light" />
                        </a>
                    </li>
                    <li class="nav-item-mb text-center h-auto ">
                        <a href="/SportTogether/Messagerie-instantane/@userSession" class="nav-link-mb border-white border-1" >
                            <Icon Name="IconName.Messenger" Color="IconColor.Light" />
                            @if (messageCount)
                            {
                                <span class="ms-1">
                                    <Badge Color="BadgeColor.Danger" Placement="BadgePlacement.MiddleRight">@nbrMessages</Badge>
                                </span>
                            }
                        </a>
                    </li>
                    <li class="nav-item-mb text-center h-auto">
                        <a href="/SportTogether/Mes-annonces/@userSession" class="nav-link-mb " >
                            <Icon Name="IconName.Calendar2Week" Color="IconColor.Light" />
                        </a>
                    </li>
                </ul>

            </div>
            <div class="col-1 me-4">
                
            </div>

            <!-- Right side: dropdown (Notification and User Profile) -->
            <div class="col-4 d-flex justify-content-end align-items-center">
                <Button Color="ButtonColor.Light" @onclick="OnShowModalClick" Size="Size.Small">
                    <Icon Name="IconName.BellFill" />
                    @if (listNotif.Any(n => !n.Vu))
                    {
                        <span><Badge Color="BadgeColor.Danger">@listNotif.Count(n => !n.Vu)</Badge></span>
                    }
                </Button>
                <div class="dropdown dropstart">
                    <div class="d-flex align-items-center dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="@urlPhotoProfil" alt="" width="32" height="32" class="rounded-circle me-2">
                    </div>
                    <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownUser1">
                        <li><a class="dropdown-item" href="/SportTogether/Parametre/@userSession">Paramètre</a></li>
                        <li><a class="dropdown-item" href="/SportTogether/Profil-utilisateur/@userSession">Profil</a></li>
                        <li><a class="dropdown-item" @onclick="Logout">Se déconnecter</a></li>
                    </ul>
                </div>
               
            </div>
        </div>
    </div>
</nav>


<Modal @ref="modal" IsVerticallyCentered="true" Size="ModalSize.Regular" IsScrollable="true">
    <BodyTemplate>
        @if (listNotif.Any())
        {
            <Tabs>
                <Tab>
                    <TitleTemplate>
                        <Icon Name="IconName.ListNested" Color="IconColor.Dark" />
                        <Badge Placement="BadgePlacement.BottomRight" Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.RoundedPill"> @listNotif.Where(n => n.TypeNotification == "Note" || n.TypeNotification == "Participation").Where(n => n.Vu == false).Count() </Badge>
                    </TitleTemplate>
                    <Content>
                        @foreach (NotificationUtilisateur notification in listNotif.Where(n => n.TypeNotification == "Note" || n.TypeNotification == "Participation"))
                        {
                            <div class="@(notification.Vu ? "bg-light" : "bg-info")">
                                <Button Color="ButtonColor.None" Type="ButtonType.Link" Class="d-flex align-items-start" @onclick="() => MarkAsRead(notification.NotificationId)">
                                    <span class="badge badge-pill bg-success" style="width: 40px; height: 40px; font-size: 16px; line-height: 40px;">
                                        @GetInitials(notification.TypeNotification)
                                    </span>
                                    <div class="ms-3">
                                        <div class=" text-wrap">@notification.Contenu</div>
                                        <div class="text-muted small">@notification.DateNotification.ToString("dd/MM/yyyy")</div>
                                    </div>
                                </Button>
                            </div>
                        }
                    </Content>
                </Tab>
                <Tab>
                    <TitleTemplate>
                        <div>
                         <Icon Name="IconName.PersonAdd" Color="IconColor.Dark" />
                            <Badge Placement="BadgePlacement.BottomRight" Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.RoundedPill"> @listNotif.Where(n => n.TypeNotification == "Ajout en ami" && n.Vu == false).Count() </Badge>
                        </div>
                     
                    </TitleTemplate>
                    <Content>
                        @foreach (NotificationUtilisateur notification in listNotif.Where(n => n.TypeNotification == "Ajout en ami"))
                        {
                            <div class="@(notification.Vu ? "bg-light" : "bg-info")">
                                <Button Color="ButtonColor.None" Type="ButtonType.Link" Class="d-flex align-items-start" @onclick="() => MarkAsRead(notification.NotificationId)" >
                                    <span class="badge badge-pill bg-success" style="width: 40px; height: 40px; font-size: 16px; line-height: 40px;">
                                        @GetInitials(notification.TypeNotification)
                                    </span>
                                    <div class="ms-3">
                                        <div class=" text-wrap">@notification.Contenu</div>
                                        <div class="text-muted small">@notification.DateNotification.ToString("dd/MM/yyyy")</div>
                                        <Button Color="ButtonColor.Success" @onclick="() => AccepterDemande(notification.UtilisateurEnvoiId, notification.NotificationId)" Class="rounded-circle" Size="Size.Small"><Icon Name="IconName.Check2" /></Button>
                                        <Button Color="ButtonColor.Danger" @onclick="() => RefuserDemande(notification.NotificationId)" Class="rounded-circle" Size="Size.Small"><Icon Name="IconName.X" /></Button>
                                    </div>
                                </Button>
                            </div>
                        }
                    </Content>
                </Tab>
                <Tab>
                    <TitleTemplate>
                        <Icon Name="IconName.ChatFill" Color="IconColor.Dark" />
                        <Badge Placement="BadgePlacement.BottomRight" Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.RoundedPill"> @listNotif.Where(n => n.TypeNotification == "Encouragement_publication" || n.TypeNotification == "Commentaire " || n.TypeNotification == "Encouragement_commentaire").Where(n => n.Vu == false).Count() </Badge>
                    </TitleTemplate>
                    <Content>
                        @foreach (NotificationUtilisateur notification in listNotif.Where(n => n.TypeNotification == "Encouragement_publication" || n.TypeNotification == "Commentaire " || n.TypeNotification == "Encouragement_commentaire"))
                        {
                            <div class="@(notification.Vu ? "bg-light" : "bg-info")">
                                <Button Color="ButtonColor.None" Type="ButtonType.Link" Class="d-flex align-items-start" @onclick="() => MarkAsRead(notification.NotificationId)">
                                    <span class="badge badge-pill bg-success" style="width: 40px; height: 40px; font-size: 16px; line-height: 40px;">
                                        @GetInitials(notification.TypeNotification)
                                    </span>
                                    <div class="ms-3">
                                        <div class=" text-wrap">@notification.Contenu</div>
                                        <div class="text-muted small">@notification.DateNotification.ToString("dd/MM/yyyy")</div>
                                    </div>
                                </Button>
                            </div>
                        }
                    </Content>
                </Tab>
            </Tabs>
        }
        else
        {
            <p>Aucune notification.</p>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Fermer</Button>
    </FooterTemplate>
</Modal>


@code {
    private Modal modal = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;

    private Utilisateur utilisateurInfo = new();
    private string urlPhotoProfil = string.Empty;

    bool messageCount = false;
    int nbrMessages = 0;
    private string? userSession = string.Empty;
    private bool _firstRender = true;
    private List<NotificationUtilisateur> listNotif = new();
    private int unreadCount = 0;
    private HttpClient httpClient;
    private string GetInitials(string type)
    {
        return type switch
        {
            "Commentaire" => "C",
            "Encouragement_publication" => "EP",
            "Encouragement_commentaire" => "EC",
            "Participation" => "P",
            "Ajout en ami" => "A",
            "Note" => "N",
            _ => "N/A"
        };
    }

    protected override void OnInitialized()
    {
        // Appel API pour récupérer l'utilisateur
        httpClient = ClientFactory.CreateClient("ApiSportTogetherClient");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstRender) // Eviter les appels multiples
        {
            _firstRender = false;

            userSession = await localStorage.GetUserSessionIdFromLocalStorage();
            await LoadUserInfo();
            await LoadImageUrl();
            if (utilisateurInfo != null)
            {
                await GetAllNombreMessageVu();
            }
            var result = await NotificationService.GetNotificationsByUserIdAsync(utilisateurInfo.UtilisateursId);
            if (result.IsSuccess)
            {
                listNotif = result.Notifications.OrderByDescending(n => n.DateNotification).ToList();
                CountUnreadNotifications(); // Calculer le nombre de notifications non lues
            }
            StateHasChanged();
        }
    }

    private void CountUnreadNotifications()
    {
        unreadCount = listNotif.Count(n => !n.Vu); // Compter les notifications non lues
    }

    private async Task MarkAsRead(int notificationId)
    {
        var result = await NotificationService.MarkNotificationAsReadAsync(notificationId);
        if (result.IsSuccess)
        {
            var notification = listNotif.FirstOrDefault(n => n.NotificationId == notificationId);
            if (notification != null)
            {
                notification.Vu = true; // Met à jour l'état local pour refléter le changement
                CountUnreadNotifications(); // Recalculer le nombre de notifications non lues
                if(notification.TypeNotification == "Ajout en ami")
                {
                    NavigationManager.NavigateTo($"/SportTogether/Profil-utilisateur-vue/{userSession}?utilisateur={notification.UtilisateurEnvoiId}");
                    NavigationManager.Refresh(true);
                    await modal.HideAsync();
                }
            }
        }
        else
        {
            // Gérer l'erreur ici
        }
    }
    private async Task LoadUserInfo()
    {
        utilisateurInfo = await localStorage.GetUserFromLocalStorage();
        if (utilisateurInfo == null)
        {
            NavigationManager.NavigateTo("/SportTogether/Connexion");
        }
    }

    private async Task LoadImageUrl()
    {
        urlPhotoProfil = await localStorage.GetImageUrl()!;
        if (urlPhotoProfil == string.Empty)
        {
            NavigationManager.NavigateTo("/SportTogether/Connexion");
        }
    }

    private async Task Logout()
    {
        await localStorage.Logout();
        NavigationManager.NavigateTo("/SportTogether/Connexion");
    }

    private async Task GetAllNombreMessageVu()
    {
        try
        {

            nbrMessages = await httpClient.GetFromJsonAsync<int>($"VuMessage/GetAllVuMessagesCount/{utilisateurInfo.UtilisateursId}")!;
            if (nbrMessages != 0)
            {
                messageCount = true;
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task AccepterDemande(int? utilisateurEnvoiId, int notificationId)
    {
        try
        {
            if (utilisateurEnvoiId.Value == 0) return;
            // Logique pour ajouter l'utilisateur en ami
            var ami = new Ami
                {
                    UtilisateurId1 = utilisateurEnvoiId,
                    UtilisateurId2 = utilisateurInfo.UtilisateursId,
                    DateAjout = DateTime.Now

                };

            // Appel à l'API pour créer la nouvelle amitié
            var response = await httpClient.PostAsJsonAsync($"Ami/CreateAmis", ami);
            response.EnsureSuccessStatusCode();

            // Supprimer la notification après avoir accepté la demande
            await SupprimerNotification(notificationId);

            // Notification de succès à l'utilisateur
            ToastService.Notify(new(ToastType.Success, $"L'utilisateur a été ajouté en tant que coéquipier."));
        }
        catch (HttpRequestException ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Erreur lors de l'ajout en ami : {ex.Message}"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Erreur inattendue : {ex.Message}"));
        }
    }

    private async Task SupprimerNotification(int notificationId)
    {
        try
        {
            var result = await NotificationService.DeleteNotificationAsync(notificationId);
            if (result.IsSuccess)
            {
                var notification = listNotif.Where(ln => ln.NotificationId == notificationId).FirstOrDefault();
                listNotif.Remove(notification);
                
               
            }
        }catch (HttpRequestException ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Erreur lors de la suppression de la notification : {ex.Message}"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Erreur inattendue : {ex.Message}"));
        }
    }

    private async Task RefuserDemande(int notificationId)
    {
        try
        {

            await SupprimerNotification(notificationId);
            // Notification de succès à l'utilisateur
            ToastService.Notify(new(ToastType.Success, "La demande de coéquipier a été refusée."));
            StateHasChanged();

          
        }
        catch (HttpRequestException ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Erreur lors de la suppression de la notification : {ex.Message}"));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Erreur inattendue : {ex.Message}"));
        }
    }

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
   
}
