@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@using BlazorBootstrap
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
<link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />

<div class="page">
    @if (NavigationManager.Uri != (NavigationManager.BaseUri + "SportTogether") && NavigationManager.Uri != (NavigationManager.BaseUri + "SportTogether/Connexion") && NavigationManager.Uri != (NavigationManager.BaseUri + "SportTogether/Inscription"))
    {
       <NavMenu />
    }

    <main>
        <Preload LoadingText="Chargemant..." />
        @Body
        <Modal @ref="modal" title="@titreErreur" IsVerticallyCentered="true">
            <BodyTemplate>
                @errorMessage
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Ok</Button>
            </FooterTemplate>
        </Modal>
    </main>
</div>

<div id="blazor-error-ui">
    Nous tentons de se reconnecter au serveur. Veuillez patientez...
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code{

    private bool showErrorModal = false;
    public string errorMessage = "";
    public string titreErreur = "";
    private Modal modal = default!;
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private  void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
    public async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    public async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
 
}
