@page "/SportTogether/Profil-utilisateur/{UserSessionId}"
@using SportTogetherBlazor.Models
@using System.Net.Http.Json
@using SportTogetherBlazor.Services
@using SportTogetherBlazor.Components.Pages.ComposantsReutilisables
@using SportTogetherBlazor.Components.Pages.Formulaires
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject LocalStorageServices localStorage

@if (utilisateurVue != null)
{
    <div class="container mt-4" style="color: #085f63;">

            <!-- Photo de profil et bouton modifier -->
            <div class="card shadow mb-4 text-center " style="border-top-right-radius: 15px; background-color: #49beb7;">
                <div class="card-body">
                <div class="d-flex align-items-center justify-content-center ">
                        <img src="@utilisateurVue.urlProfilImage" alt="Profile Picture" class="rounded-circle shadow-lg" id="img-profile" />
                        <h4 class="mt-2 mx-2">@utilisateurVue.Pseudo</h4>
                    </div>
                   
                    <Button Color="ButtonColor.Secondary" TooltipTitle="Modifier la photo de profil" Size="Size.Small">
                        Modifier
                    </Button>
                </div>

        </div>
       
        <div class="row justify-content-center ">
            <!-- Row principale avec Infos, Tabs et Badges -->
            <div class="col-md-3 col-lg-12 w-auto">
                <!-- Infos utilisateur et amis -->
                <div class="card shadow-sm p-2 text-center" style="border-radius: 15px; background-color: #FFFFFF;">
                    <div class="card-body">
                        <h4 class="card-title ">Infos</h4>
                        <!-- Âge -->
                        <p class="card-text ">
                            <Icon Name="IconName.Calendar" Color="IconColor.Success" class="me-1" /> @utilisateurVue.Age
                        </p>
                        <hr class="mb-1 " style="width:50%; margin-left: auto;
                    margin-right: auto;" />
                        <!-- Sexe -->
                        <p class="card-text">
                            <Icon Name="IconName.GenderAmbiguous" Color="IconColor.Success" class="me-1" /> @utilisateurVue.Genre
                        </p>
                        <hr class="mb-1 " style="width:50%; margin-left: auto;
                    margin-right: auto;" />
                        <ListeCoequipier nombreAmis="@nombreAmis" IsDisabled="false" userSession="@UserSessionId" utilisateurId="utilisateurVue.UtilisateursId" />
                        <hr class="mb-1 " style="width:50%; margin-left: auto;
                    margin-right: auto;" />
                        <Badge Color="BadgeColor.Secondary">
                            @utilisateurVue.NoteMoyenneDesAnnonces / 10
                        </Badge>

                       
                    </div>
                </div>
            </div>

            <!-- Section des Tabs au centre -->
            <div class="col-md-6">
               

                <!-- Section des onglets (Tabs) -->
                <Tabs Class="justify-content-center bg-light" EnableFadeEffect="true" NavStyle="NavStyle.Pills" >
                    <Tab Title="" IsActive="true" >
                        <TitleTemplate>
                            <Icon Name="IconName.BookmarkCheckFill" /> Publications
                        </TitleTemplate>
                        <Content>
                            <div class="container-fluid bg-light">
                                <div class="mt-4 p-1">
                                    <AjoutDePublication UtilisateurId="utilisateurVue.UtilisateursId" OnPublicationAdded="RafraichirPublications" />
                                </div>
                                <div class="mt-4">
                                    <MesPublications @ref="mesPublicationsRef" utilisateurId="utilisateurVue.UtilisateursId" />
                                </div>
                            </div>
                        </Content>
                    </Tab>
                    <Tab Title="" >
                        <TitleTemplate>
                            <Icon Name="IconName.Activity" /> Mes stats
                        </TitleTemplate>
                        <Content>
                             <div class="container-fluid bg-light">
                                <MesStats utilisateurVue="@utilisateurVue" />
                            </div>
                        </Content>
                    </Tab>
                    <Tab Title="" >
                        <TitleTemplate>
                            <Icon Name="IconName.Heart" /> Mes préférences
                        </TitleTemplate>
                        <Content>
                            <FrmModificationPreferenceProfil utilisateur_id="@utilisateurVue.UtilisateursId" isModif="true"/>
                        </Content>
                    </Tab>
                    <Tab Title="" >
                        <TitleTemplate>
                            <Icon Name="IconName.InfoCircleFill" /> Informations du profil
                        </TitleTemplate>
                        <Content>
                             <div class="container-fluid bg-light">
                                <FrmModificationUtilisateur utilisateurPourModif="utilisateurInfo"  />
                            </div>
                        </Content>
                    </Tab>
                </Tabs>
            </div>


                <div class="col-md-3">
                    <div class="card shadow-sm p-3 mb-3" style="border-radius: 15px;">
                        <div class="card-body">
                            <!-- Section Titre -->
                            <h5 class="card-title text-center mb-3" style="color: #085f63;">Informations sur le sport</h5>

                            <!-- Section Niveau Sport et Disponibilités -->
                            <div class="d-flex justify-content-between mb-4">
                                <div>
                                    <h6 class="mb-1">Niveau Sport</h6>
                                    <p class="text-muted">@utilisateurVue.NiveauSport</p>
                                </div>
                                <div>
                                    <h6 class="mb-1">Disponibilités</h6>
                                    <p class="text-muted">@utilisateurVue.Disponibilites</p>
                                </div>
                            </div>

                            <!-- Section Description Sport et Type Partenaire -->
                            <div class="mb-4">
                                <h6 class="mb-1">Description Sport</h6>
                                <p class="text-muted">@utilisateurVue.DescriptionSport</p>
                            </div>

                            <div class="mb-4">
                                <h6 class="mb-1">Type de Partenaire</h6>
                                <p class="text-muted">@utilisateurVue.TypePartenaire</p>
                            </div>

                            <!-- Section Fun Fact -->
                            <div class="mb-4">
                                <h6 class="mb-1">Fun Fact</h6>
                                <p class="text-muted">@utilisateurVue.FunFact</p>
                            </div>
                        </div>
                    </div>


            </div>
        </div>
    </div>
}
else
{
    <p class="text-center">Chargement du profil...</p>
}

<style>
    #img-profile {
        width: 120px;
        height: 120px;
        border: 3px solid #085f63;
    }

    .nav-pills .nav-link.active {
        background-color: #49beb7;
        color: #FFFFFF;
    }

    .nav-pills .nav-link {
        color: #085f63;
    }
</style>
@code {
    [Parameter]
    public string UserSessionId { get; set; }
    public UtilisateurVue? utilisateurVue { get; set; } 
    private Utilisateur utilisateurInfo;
    private HttpClient httpClient;
    private MesPublications mesPublicationsRef;
    private int nombreAmis = 0;
    
    private bool showModifierBtn = false;

  

    protected override async Task OnInitializedAsync()
    {
        // Appel API pour récupérer l'utilisateur
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        await LoadUserInfo();
        await GetUtilisateurVue();
        // Appel API pour récupérer le nombre d'amis
        nombreAmis = await httpClient.GetFromJsonAsync<int>($"Ami/GetNombreAmi/{utilisateurInfo.UtilisateursId}");
    }
    private async Task RafraichirPublications()
    {
        await mesPublicationsRef.GetPublicationsIdsByUtilisateur(); // Méthode pour récupérer les publications
        StateHasChanged();
    }
    private async Task GetUtilisateurVue()
    {
        
            try
            {

                // Construction de l'URL avec des paramètres sécurisés
            string requestUri = $"Utilisateur/GetUtilisateurVueByIdParMois/{utilisateurInfo.UtilisateursId}/mois/{DateTime.Now.Month}/annee/{DateTime.Now.Year}";

            var response = await httpClient.GetAsync(requestUri);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);

                // Vérification du succès de la réponse
                if (response.IsSuccessStatusCode)
                {
                    // Désérialisation des données JSON en UtilisateurVue
                   utilisateurVue = await response.Content.ReadFromJsonAsync<UtilisateurVue>();

                   
                }
                else
                {
                    throw new Exception($"Erreur lors de la récupération de l'utilisateur : {response.ReasonPhrase} {response.Content.ToString()}");
                }
            }
            catch (HttpRequestException httpEx)
            {
                // Gestion des erreurs liées aux requêtes HTTP
                Console.WriteLine($"Erreur réseau : {httpEx.Message}");
                throw;
            }
            catch (Exception ex)
            {
                // Gestion des autres exceptions
                Console.WriteLine($"Erreur : {ex.Message}");
                throw;
            
        }

    }
    private async Task LoadUserInfo()
    {
        utilisateurInfo = await localStorage.GetUserFromLocalStorage()!;
        if (utilisateurInfo == null)
        {
            NavigationManager.NavigateTo("/SportTogether/Connexion");
        }
        // urlPhotoProfil =  await
        // Utiliser cette information pour lier aux éléments du HTML ci-dessus

    }
}
