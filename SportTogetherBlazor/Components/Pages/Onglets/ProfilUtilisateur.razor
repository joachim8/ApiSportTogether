@page "/SportTogether/Profil-utilisateur"
@using SportTogetherBlazor.Models
@using System.Net.Http.Json
@using SportTogetherBlazor.Services
@using SportTogetherBlazor.Components.Pages.ComposantsReutilisables
@using SportTogetherBlazor.Components.Pages.Formulaires
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject SessionStorageServices session
@if(utilisateurVue != null)
{
    <div class="container mt-4" style="color:#085f63;">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <!-- Card contenant les informations de l'utilisateur -->
             
                <div class="card shadow-lg w-auto card">
                    <div class="card-body d-flex text-center">
                        <!-- Photo de profil à gauche -->
                        <div class="me-4">
                            <img src="@utilisateurVue.urlProfilImage" alt="Profile Picture" class="rounded-circle" id="img-profile" />
                            <!-- Bouton "Modifier" qui apparaît au hover -->
                            <Button Color="ButtonColor.Secondary" Class="btn-modifier position-absolute bottom-0 start-50 translate-middle-x" TooltipTitle="Modifier la photo de profil" Size="Size.Small">
                                Modifier
                            </Button>
                        </div>
                        <!-- Informations utilisateur à droite -->
                        <div class="flex-grow-1 justify-content-center">
                            <h4 class="card-title"><strong>@utilisateurVue.Pseudo</strong></h4>
                            <!-- Séparateur -->
                            <hr class="mb-1" style="width:50%; margin-left: auto;
                    margin-right: auto;" />
                            <!-- Âge -->
                            <p class="card-text ">
                                <Icon Name="IconName.Calendar" Color="IconColor.Success" class="me-1" /> @utilisateurVue.Age
                            </p>

                            <hr class="mb-1 " style="width:50%; margin-left: auto;
                    margin-right: auto;" />
                            <!-- Sexe -->
                            <p class="card-text">
                                <Icon Name="IconName.GenderAmbiguous" Color="IconColor.Success" class="me-1" /> @utilisateurVue.Genre
                            </p>
                            <hr class="mb-1 " style="width:50%; margin-left: auto;
                    margin-right: auto;" />
                            <!-- Bouton coéquipiers avec compteur -->
                            <Button Color="ButtonColor.Success" @onclick="AfficherListeAmis">
                                <Icon Name="IconName.PersonHeart" class="me-1" /> @nombreAmis
                            </Button>
                            <hr class="mb-1 " style="width:50%; margin-left: auto;
                    margin-right: auto;" />
                            <Badge Color="BadgeColor.Secondary">
                                @utilisateurVue.NoteMoyenneDesAnnonces / 10
                            </Badge>
                         

                        </div>
                    </div>
                    <!-- Description en bas (footer de la card) -->
                    <div class="card-footer text-center">
                        <p class="text-muted">@utilisateurVue.Description</p>
                    </div>
                </div>
               
              

            </div>
        </div>


        <!-- Séparateur -->
        <hr class="mb-4 mt-4" style="width:50%; margin-left: auto;
            margin-right: auto;" />

        <!-- Section des onglets -->
        <div class="row justify-content-center">
            <div class="col-md-8">
                <Tabs Class=" justify-content-center" EnableFadeEffect="true" NavStyle="NavStyle.Pills">
                    <Tab Title="" IsActive="true">
                        <TitleTemplate>
                            <Icon Name="IconName.BookmarkCheckFill" /> Publications
                        </TitleTemplate>
                        <Content>
                            <div class="mt-4">
                                <AjoutDePublication UtilisateurId="utilisateurVue.UtilisateursId" OnPublicationAdded="RafraichirPublications" />
                            </div>
                            <div class="mt-4">
                                <MesPublications @ref="mesPublicationsRef" utilisateurId="utilisateurVue.UtilisateursId" />
                            </div>
                        </Content>
                    </Tab>
                    <Tab Title="">
                        <TitleTemplate>
                            <Icon Name="IconName.Activity" /> Mes stats
                        </TitleTemplate>
                        <Content>
                            <MesStats utilisateurVue="@utilisateurVue"/>
                        </Content>
                    </Tab>
                    <Tab Title="">
                        <TitleTemplate>
                            <Icon Name="IconName.Heart" /> Mes préférences
                        </TitleTemplate>
                        <Content>
                            <p class="mt-3">Préférences de l'utilisateur.</p>
                        </Content>
                    </Tab>
                    <Tab Title="">
                        <TitleTemplate>
                            <Icon Name="IconName.InfoCircleFill" /> Informations du profil
                        </TitleTemplate>
                        <Content>
                           <FrmModificationUtilisateur utilisateur="utilisateurInfo"/>
                        </Content>
                    </Tab>
                </Tabs>
            </div>
        </div>
    </div>
}
else
{
    
}


<style>
    #img-profile {
        width: 150px;
        height: 150px;
        border:solid;
        border-color: #085f63;
        
    }
    /* Initialement cacher le bouton */
    .btn-modifier {
        visibility: hidden;
        opacity: 0;

    }

    /* Afficher le bouton quand on survole l'image */
    #img-profile:hover + .btn-modifier {
        visibility: visible;
        opacity: 1;
    }


        #card-info-user{
       
        }
</style>

@code {

    public UtilisateurVue? utilisateurVue { get; set; } 
    private Utilisateur utilisateurInfo;
    private HttpClient httpClient;
    private MesPublications mesPublicationsRef;
    private int nombreAmis = 0;
    
    private bool showModifierBtn = false;

    // Méthode pour afficher la liste d'amis
    private void AfficherListeAmis()
    {
        // Logique pour ouvrir la modal des amis (ou utiliser un autre composant)
    }

    protected override async Task OnInitializedAsync()
    {
        // Appel API pour récupérer l'utilisateur
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        await LoadUserInfo();
        await GetUtilisateurVue();
        // Appel API pour récupérer le nombre d'amis
        nombreAmis = await httpClient.GetFromJsonAsync<int>($"Ami/GetNombreAmi/{utilisateurInfo.UtilisateursId}");
    }
    private async Task RafraichirPublications()
    {
        await mesPublicationsRef.GetPublicationsIdsByUtilisateur(); // Méthode pour récupérer les publications
        StateHasChanged();
    }
    private async Task GetUtilisateurVue()
    {
        
            try
            {

                // Construction de l'URL avec des paramètres sécurisés
            string requestUri = $"Utilisateur/GetUtilisateurVueByIdParMois/{utilisateurInfo.UtilisateursId}/mois/{DateTime.Now.Month}/annee/{DateTime.Now.Year}";

            var response = await httpClient.GetAsync(requestUri);
            var responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);

                // Vérification du succès de la réponse
                if (response.IsSuccessStatusCode)
                {
                    // Désérialisation des données JSON en UtilisateurVue
                   utilisateurVue = await response.Content.ReadFromJsonAsync<UtilisateurVue>();

                   
                }
                else
                {
                    throw new Exception($"Erreur lors de la récupération de l'utilisateur : {response.ReasonPhrase} {response.Content.ToString()}");
                }
            }
            catch (HttpRequestException httpEx)
            {
                // Gestion des erreurs liées aux requêtes HTTP
                Console.WriteLine($"Erreur réseau : {httpEx.Message}");
                throw;
            }
            catch (Exception ex)
            {
                // Gestion des autres exceptions
                Console.WriteLine($"Erreur : {ex.Message}");
                throw;
            
        }

    }
    private async Task LoadUserInfo()
    {
        utilisateurInfo = session.GetUserFromSession()!;
        if (utilisateurInfo == null)
        {
            NavigationManager.NavigateTo("/SportTogether/Connexion");
        }
        // urlPhotoProfil =  await
        // Utiliser cette information pour lier aux éléments du HTML ci-dessus

    }
}
