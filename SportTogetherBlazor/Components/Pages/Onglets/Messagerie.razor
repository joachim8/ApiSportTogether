@page "/SportTogether/Messagerie-instantane"
@using SportTogetherBlazor.Models
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@using SportTogetherBlazor.Services
@inject SessionStorageServices session
@using Microsoft.AspNetCore.SignalR.Client
<div class="container">
    <div class="row m-0">
        <div class="col-lg-4">
            <div class="card chat-app">
                <div id="plist" class="people-list">
                    <EditForm Model="@rechercheModel" OnSubmit="@RechercheSubmit" FormName="RechercheForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group d-flex flex-row">
                            <InputText id="rechercheTitre" class="form-control"
                                       @bind-Value="rechercheModel.Titre" placeholder="Recherche..." />
                            <Button Type="ButtonType.Submit" Color="ButtonColor.Light" Size="Size.Medium" TooltipTitle="Rechercher">
                                <Icon Name="IconName.Search" />
                            </Button>
                        </div>
                    </EditForm>
                    <div class="list-group" id="list-tab" role="tablist">
                        @if (listGroupe.Any())
                        {
                            @foreach (Groupe groupe in listGroupe)
                            {
                                <a class="list-group-item list-group-item-action @(groupe == selectedGroupe ? "active" : "")"
                                   id="list-@groupe.Nom-list" @onclick="() => SelectGroupe(groupe)">
                                    <div class="card">
                                        <div class="row no-gutters">
                                            <div class="col-sm-5">
                                                <img class="card-img img-fluid img-thumbnail" src="/images/@GetSportImageUrl((int)groupe.Annonce!.SportId!)" alt="groupe">
                                            </div>
                                            <div class="col-sm-7">
                                                <div class="card-body">
                                                    <h5 class="card-title">@groupe.Nom</h5>
                                                    <small>@groupe.LastMessage</small>
                                                    @if (groupe.nbreMessageVu != null)
                                                    {
                                                        <small><Badge Color="BadgeColor.Danger" Placement="BadgePlacement.MiddleRight">@groupe.nbreMessageVu</Badge></small>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                        else
                        {
                            <p>Veuillez participer ou ajouter une annonce</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-8">
            <div class="chat border rounded">
                @if (selectedGroupe != null)
                {
                    <div class="container">

                        @if (selectedGroupe != null)
                        {
                            <!-- Header avec des bords arrondis -->
                            <div class="chat-header position-sticky rounded-top" >
                                <div class="row align-items-center text-white" style="background-color:#49beb7; margin-bottom:5px; margin-top:5px;">
                                    <div class="col-lg-6">
                                        <h5 class="mb-0">@selectedGroupe.Nom</h5>
                                    </div>
                                    <div class="col-lg-6 text-end">
                                        <Button Color="ButtonColor.None" @onclick="OpenSettings" TooltipTitle="Paramètre">
                                            <Icon Name="IconName.GearFill" Color="IconColor.White" />
                                        </Button>
                                    </div>
                                </div>
                            </div>

                            @if (listMessage != null && listMessage.Any())
                            {
                                <!-- Historique des messages avec scrollbar externe -->
                                <div class="chat-history overflow-auto chat-scroll" style="max-height: calc(100vh - 150px);">
                                    @foreach (var message in listMessage)
                                    {
                                        <div class="d-flex flex-column @((message.UtilisateurId == utilisateurID ? "align-items-end" : "align-items-start"))">
                                            <div class="dropdown">
                                                <img src="@message.urlProfilImage" class="avatar mb-2">
                                                <button class="p-2 rounded-3 btn-sm @((message.UtilisateurId == utilisateurID ? "bg-custom-user" : "bg-body-tertiary"))" style="border:none;" data-bs-toggle="dropdown" aria-expanded="false">
                                                    @message.Contenu
                                                </button>
                                                @if (message.UtilisateurId == utilisateurID)
                                                {
                                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-@message.MessagesId">
                                                        <li><a class="dropdown-item" @onclick="() => SupprimerMessage(message.MessagesId)">Supprimer</a></li>
                                                        <li><a class="dropdown-item" @onclick="() => Reaction(message.MessagesId)">Réagir</a></li>
                                                    </ul>
                                                }
                                            </div>
                                            <p class="small mt-2 text-muted">
                                                @message.Timestamp!.Value.ToString("HH:mm") | @message.NomUtilisateur
                                            </p>
                                        </div>
                                    }
                                </div>
                            }

                            <!-- Formulaire pour envoyer un message -->
                            <div class="chat-message clearfix position-fixed w-50" style="bottom: 0; background-color: white; padding: 10px;">
                                <div class="input-group mb-0">
                                    <InputText class="form-control" placeholder="Tapez votre message..." @bind-Value="nouveauMessage" />
                                    <div class="input-group-append">
                                        <Button Color="ButtonColor.Success" @onclick="EnvoyerMessage">Envoyer</Button>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p class="text-center">Veuillez sélectionner un groupe pour afficher les messages.</p>
                        }
                    </div>
                }
                else
                {
                    <p class="text-center">Veuillez sélectionner un groupe pour afficher les messages.</p>
                }
            </div>
        </div>
    </div>
</div>

<!-- Style optimisé -->
<style>
    .chat {
        border: 2px solid #49beb7;
        border-radius: 15px;
    }

    .chat-header {
        border-radius: 15px 15px 0 0;
    }

    .chat-history {
        padding: 10px;
    }

    .chat-scroll {
        margin-right: -15px; /* Scrollbar externe */
    }

    .chat-message {
        z-index: 1000;
    }

    .avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
    }

    .bg-custom-user {
        background-color: #49beb7;
        color: white;
    }

    .bg-body-tertiary {
        background-color: #f1f1f1;
        color: black;
    }

    .message-bubble {
        padding: 10px;
        border-radius: 15px;
        max-width: 400px;
        word-wrap: break-word;
    }

    .timestamp {
        font-size: 0.8rem;
        color: #6c757d;
    }
</style>

@code {
    #region "Variables"
    private RechercheModel rechercheModel = new RechercheModel();
    private List<Groupe> listGroupe = new();
    private HttpClient httpClient;
    private int utilisateurID = 0;
    private Groupe selectedGroupe;
    private string nouveauMessage;
    private List<Message> listMessage;
    private string nomUtilisateur;
    private HubConnection _hubConnection;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    #endregion
    #region "ContextMenu"

    private async Task SupprimerMessage(int MessagesId)
    {
        if (MessagesId != 0)
        {
            try
            {
                var response = await httpClient.DeleteAsync($"Message/{MessagesId}");

                if (response.IsSuccessStatusCode)
                {
                    listMessage.RemoveAll(m => m.MessagesId == MessagesId);

                    // Mettre à jour l'état de l'interface utilisateur
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine($"Échec de la suppression du message ID {MessagesId}.");
                }
            }catch(Exception ex)
            {
                ToastService.Notify(new(ToastType.Danger, $"Échec de la suppression du message ID {MessagesId}. Exception : {ex.Message}"));
            }

        }
    }

    private void Reaction(int MessagesId)
    {
        // Logique pour Action 2
        Console.WriteLine($"Action 2 exécutée sur le message ID: {MessagesId}");

    }


    #endregion
    #region "Initialisation"
    /// <summary>
    /// Initialisation de la page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        if (listGroupe != null)
        {
            listGroupe.Clear();
        }
        if(listMessage != null)
        {
             listMessage.Clear();
        }
       
        
        _hubConnection = new HubConnectionBuilder()
    .WithUrl($"http://localhost:5000/chatHubSportTogether")
    .Build();
        Utilisateur utilisateurInfo = session.GetUserFromSession()!;
        if (utilisateurInfo != null) { utilisateurID = utilisateurInfo.UtilisateursId;
            nomUtilisateur = utilisateurInfo.Pseudo!;
        }

        await _hubConnection.StartAsync();

        _hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
         {
             string[] messageInfo = message.Split('¤');
             await InvokeAsync(() =>
             {
                 if (user != nomUtilisateur)
                 {
                     listMessage.Add(new Message
                         {
                             NomUtilisateur = user,
                             Contenu = messageInfo[0],
                             Timestamp = DateTime.Now,
                             urlProfilImage = messageInfo[1]
                         });
                     ToastService.Notify(new(ToastType.Success, $" Vous avez un nouveau message de {user} sur le groupe {messageInfo[2]} ,{DateTime.Now.ToLocalTime().ToString("hh:mm")}"));
                     StateHasChanged();

                 }
             });
         });
        // Écouter l'événement SupprimerMessageClient
        _hubConnection.On<string, int>("SupprimerMessageClient", async (user, messageId) =>
        {
            await InvokeAsync(() =>
            {
                if (user != nomUtilisateur)
                {
                    listMessage.RemoveAll(m => m.MessagesId == messageId);
                    StateHasChanged();
                }
            });
        });


        await GetGroupes();
        // Récupérer les informations utilisateur et rejoindre les groupes correspondants
        await RejoindreGroupesUtilisateur();
        await GetMessages();

    }
    // Dispose method to stop the SignalR connection
    public void Dispose()
    {
        _hubConnection?.DisposeAsync().AsTask().Wait();
    }


    private async Task GetGroupes()
    {
        try
        {
            listGroupe.Clear();
            listGroupe = await httpClient.GetFromJsonAsync<List<Groupe>>($"Groupe/GetGroupePourMessagerie/{utilisateurID}")!;
            if (listGroupe.Any())
            {
                selectedGroupe = listGroupe.First();
                foreach (Groupe groupe in listGroupe)
                {
                    int? nbreVu = await GetNombreMessageVu(groupe.GroupesId);
                    if (nbreVu != null)
                    {
                        groupe.nbreMessageVu = nbreVu;
                    }

                }
            }
        }
        catch (Exception ex)
        {

        }

    } 
     private async Task RejoindreGroupesUtilisateur()
    {
        foreach (var groupe in listGroupe)
        {
            await _hubConnection.SendAsync("JoinGroup", $"{groupe.GroupesId}¤{groupe.Nom}");
        }
    }
    private async Task<int?> GetNombreMessageVu(int groupeId)
    {
        try
        {
            int nbre = await httpClient.GetFromJsonAsync<int>($"GetVuMessagesCount/{groupeId}")!;
            return nbre;
        }
        catch (Exception ex)
        {
            return null;
        }



    }
     private async Task GetMessages()
    {
        try
        {
            listMessage = await httpClient.GetFromJsonAsync<List<Message>>($"Message/GetMessagesByGroupe/{selectedGroupe.GroupesId}")!;
            StateHasChanged(); // Re-render the component
        }catch(Exception ex)
        {

        }



    }
    #endregion
    #region "Task et méthodes"
     private void OpenSettings()
    {
        // Logique pour ouvrir les paramètres
        Console.WriteLine("Paramètres ouverts");
    }
    private async Task SelectGroupe(Groupe groupe)
    {
        if (selectedGroupe != null)
        {
            await _hubConnection.SendAsync("LeaveGroup", selectedGroupe.Nom);
         }

        selectedGroupe = groupe;

        await _hubConnection.SendAsync("JoinGroup", selectedGroupe.Nom);
        if(listMessage != null)
            listMessage.Clear();
       
        await GetMessages(); // Charger les messages pour le groupe sélectionné
       
    }
   
    private readonly Dictionary<int, (string color, string imageUrl)> sportStyles = new()
    {
        { 1, ("#6BDE2A", "ballon-foot.jpg") },
        { 2, ("#391E67", "basketball.jpg") },
        { 4, ("#6B1D4B", "tennis.jpg") },
        { 5, ("#D8AC2C", "athletisme.jpg") },
        { 6, ("#B36EDD", "gymnastique.jpg") },
        { 8, ("#CCF3DB", "natation.jpg") },
        { 9, ("#2C1707", "baseball.jpg") },
        { 10, ("#2A87FD", "cyclisme.jpg") },
        { 11, ("#C084BF", "volleyball.jpg") },
        { 12, ("#A78DA3", "rugby.jpg") },
        { 14, ("#A78DA3", "boxe.jpg") },
        { 15, ("#927584", "hockey.jpg") },
        { 16, ("#9A7C43", "tennis_table.jpg") },
        { 17, ("#033786", "badminton.jpg") },
        { 18, ("#6BDE2A", "poids-salles.jpg") },
        { 21, ("#391E67", "pétanque.jpg") },
        { 22, ("#6B1D4B", "yoga.jpg") },
    };

    /// <summary>
    ///
    /// </summary>
    /// <param name="sportId"></param>
    /// <returns></returns>
    private string GetSportColor(int sportId)
    {
        return sportStyles.ContainsKey(sportId) ? sportStyles[sportId].color : "#FFFFFF";
    }

    private async Task EnvoyerMessage()
    {
        if (!string.IsNullOrEmpty(nouveauMessage) && selectedGroupe != null)
        {
            Message message = new Message
                {
                    Contenu = nouveauMessage,
                    UtilisateurId = utilisateurID,
                    GroupeId = selectedGroupe.GroupesId,
                    Timestamp = DateTime.Now,
                    NomUtilisateur = nomUtilisateur
                };
            try
            {
                var client = HttpClientFactory.CreateClient("ApiSportTogetherClient");
                // Envoyer le message au serveur
                var response = await client.PostAsJsonAsync("Message/CreateMessage", message);
                if (response.IsSuccessStatusCode)
                {
                    // Ajouter le message à la liste des messages localement après un enregistrement réussi
                    Message savedMessage = await response.Content.ReadFromJsonAsync<Message>()!;
                    listMessage.Add(savedMessage);

                    // Mettre à jour l'affichage
                    StateHasChanged();
                }
                else
                {
                    // Gérer l'erreur si l'envoi échoue
                    Console.WriteLine("Erreur lors de l'envoi du message.");
                }

                // Réinitialiser le champ de saisie
                nouveauMessage = string.Empty;
            }catch(Exception ex)
            {
                
            }
           

            
        }
    }


    private async Task RechercheSubmit()
    {
        // if (!string.IsNullOrWhiteSpace(rechercheModel.Titre))
        // {
        //     if (!bFirstFiltreAnnonces)
        //     {
        //         try
        //         {
        //             annonces.Clear();
        //             PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
        //             annonces = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/titre/{rechercheModel.Titre}/{genreUtilisateur}/{villeUtilisateur}"))!);
        //             PreloadService.Hide();
        //             StateHasChanged();
        //         }
        //         catch (Exception ex)
        //         {
        //             PreloadService.Hide();
        //             Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        //         }
        //     }
        // }
        // else
        // {
        //     await LoadAnnonces();
        // }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="sportId"></param>
    /// <returns></returns>
    private string GetSportImageUrl(int sportId)
    {
        return sportStyles.ContainsKey(sportId) ? sportStyles[sportId].imageUrl : "default.jpg";
    }
    public class RechercheModel
    {
        public string Titre { get; set; } = string.Empty;
    }
    #endregion
}
