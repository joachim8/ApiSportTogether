@page "/SportTogether/Annonces/{UserSessionId}"
@using SportTogetherBlazor.Components.Pages.ComposantsReutilisables
@using SportTogetherBlazor.Models
@using SportTogetherBlazor.Services
@using System.Text.Json.Serialization
@using System.Text.Json
@inject NavigationManager navigation
@inject LocalStorageServices localStorage
@inject HttpClient Http
<PageTitle>Annonces | SportTogether</PageTitle>

<nav class="navbar navbar-expand position-static" style="background-color:#eff7f4">
    <div class="container-fluid">
        <div class="collapse navbar-collapse" id="navbarText">
           
            <div class="p-2 col-3">
            <Button Type="ButtonType.Link" Color="ButtonColor.Success" Size="Size.Medium" @onclick="AllerAAjoutAnnonce" TooltipTitle="Ajouter une annonce"> <Icon Name=" IconName.PlusCircle" Color="IconColor.White" /></Button>
            </div>
            <div class="p-2 col-4">
            <EditForm Model="@rechercheModel" OnSubmit="@RechercheSubmit" FormName="RechercheForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group d-flex flex-row">
                    <InputText id="rechercheTitre" class="form-control"
                               @bind-Value="rechercheModel.Titre" placeholder="Recherche..." />
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Light" Size="Size.Medium" TooltipTitle="Rechercher"> <Icon Name=" IconName.Search" /></Button>
                </div>
            </EditForm>
            </div>

            <div class="p-2 col-4">
                <div class="btn-group">
                    <div class="px-2">
                        <FiltreParSports SportsSelected="@SportsSelected" OnFilterApplied="RechercherParSport" />
                    </div>
                    <div class="px-2">
                         <FiltreParVille SelectedVilles="@SelectedVilles" OnFilterApplied="RechercherParVille" />
                    </div>
                    <div class="px-2">
                        <FiltreParGenre SelectedGenre="@SelectedGenre" OnFilterApplied="RechercherParGenre" genres="listGenre" />
                       
                    </div>
                    <div class="px-2">
                        <SportButton />
                    </div>
                </div>
            </div>
            
        </div>
    </div>
</nav>

<div class="container-fluid">
    <!-- Cards Section -->
    <div class="row mt-3">
        @if (annonces != null && annonces.Any())
        {
            @foreach (AnnonceVue annonce in annonces)
            {
                <div class="col-md-4 mb-4 col-sm-6 col-xs-12">
                    <AnnonceCard annonceVue="@annonce" utilisateur="@utilisateurId" />
                </div>
            }
        }
        else if (annonces != null && !annonces.Any())
            {
                <div class="col-12">
                    <p>Aucune annonce trouvée.</p>
                </div>
            }
           
    </div>
</div>

<!-- Pagination Section -->
@if (totalPages > 1)
{
    <Pagination ActivePageNumber="@currentPage"
                TotalPages="@totalPages"
                DisplayPages="5"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight"
                PageChanged="PageChanged"
                Class="custom-pagination-container" />
}
<style>
    .card-header img {
        width: 100%; /* Adjust image width within card */
    }

    .custom-pagination-container {
        display: flex;
        justify-content: center; /* Centrer la pagination horizontalement */
        align-items: center;

    }

        .custom-pagination-container .pagination-link {
            color: #4CAF50 !important; /* Changer la couleur du texte */
            background-color: #f0f0f0; /* Couleur d'arrière-plan des liens */
            border: 1px solid #ddd; /* Bordure autour des liens */
            margin: 0 5px;
            padding: 5px 10px;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

            .custom-pagination-container .pagination-link:hover {
                background-color: #4CAF50; /* Changer la couleur au survol */
                color: white !important; /* Couleur du texte au survol */
            }

            .custom-pagination-container .pagination-link.active {
                background-color: #007bff; /* Couleur d'arrière-plan pour la page active */
                color: white !important;
            }

            .custom-pagination-container .pagination-link.disabled {
                background-color: #e0e0e0; /* Couleur pour les liens désactivés (premier/dernier) */
                color: #888 !important;
            }

</style>

@code {
    [Parameter]
    public string UserSessionId { get; set; }

    private int currentPage = 1;
    private int totalPages = 1;
    private int annoncesPerPage = 12;
    private List<AnnonceVue> annonces;
    private bool bFirstFiltreAnnonces = true;
    [Inject] protected PreloadService PreloadService { get; set; }
    private RechercheModel rechercheModel = new RechercheModel();
    private string? villeUtilisateur;
    private string? genreUtilisateur;

    public int utilisateurId { get; set; }
    public class RechercheModel
    {
        public string Titre { get; set; } = string.Empty;
    }
    [SupplyParameterFromForm]
    public List<string> SportsSelected { get; set; } = new List<string>();
    [SupplyParameterFromForm]
    public List<string> SelectedVilles { get; set; } = new List<string>();
    [SupplyParameterFromForm]
    public string SelectedGenre { get; set; } = string.Empty;

    public List<string> listGenre = new();
    private bool showFilterSports = false;
    private string typeFiltre = string.Empty;

    // Méthode pour charger les annonces avec pagination
    private async Task LoadAnnonces(int page)
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/{genreUtilisateur}/{villeUtilisateur}/{page}");
            if (result != null)
            {
                annonces = result;
                totalPages = (int)Math.Ceiling(annonces.FirstOrDefault().TotalAnnonce.Value / 12.0);
                currentPage = page;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        }
    }

    // Méthode appelée lors du changement de page
    private async Task PageChanged(int newPage)
    {
        switch (typeFiltre)
        {
            case "Genre":
                await RechercherParGenre(SelectedGenre);
                break;
               
            case "Ville":
              await RechercherParVille(SelectedVilles);
                break;
            case "Sport":
                await RechercherParSport(SportsSelected);
                break;
            default:
                await LoadAnnonces(newPage);
                break;
        }

    }

    private void ToggleFilterSports()
    {
        showFilterSports = !showFilterSports;
    }

    private async Task RechercherParSport(List<string> selectedSports)
    {
        if (selectedSports.Count == 0)
        {
            // Handle the case where no sports are selected, if needed
            return;
        }

        SportsSelected = selectedSports;
        string sports = string.Join(",", SportsSelected);

        try
        {
            if (annonces != null)
                annonces.Clear();
            PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
            var result = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/sports/{sports}/{villeUtilisateur}/{genreUtilisateur}/{currentPage}"))!);
            if (result != null)
            {
                annonces = result;
                totalPages = (int)Math.Ceiling(annonces.FirstOrDefault().TotalAnnonce.Value / 12.0); 
                typeFiltre = "Sport";
                PreloadService.Hide();
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        }
    }
    private async Task RechercherParVille(List<string> selectedVilles)
    {
        if (selectedVilles.Count == 0)
        {
            return;
        }

        SelectedVilles = selectedVilles;
        string villes = string.Join(",", SelectedVilles);


        try
        {
            if (annonces != null)
                annonces.Clear();
            PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
            var result = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/villes/{villes}/{genreUtilisateur}/{currentPage}"))!);
            if (result != null)
            {
                annonces = result;
                totalPages = (int)Math.Ceiling(annonces.FirstOrDefault().TotalAnnonce.Value / 12.0);
                typeFiltre = "Sport";
                PreloadService.Hide();
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        }
       
    }
    private async Task RechercherParGenre(string selectedGenre)
    {
        if (string.IsNullOrEmpty(selectedGenre))
        {
            return;
        }

        SelectedGenre = selectedGenre;
        try
        {
            if (annonces != null)
                annonces.Clear();
            PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
            var result = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/genre/{selectedGenre}/{villeUtilisateur}/{currentPage}"))!);
            if (result != null)
            {
                annonces = result;
                totalPages = (int)Math.Ceiling(annonces.FirstOrDefault().TotalAnnonce.Value / 12.0);
                typeFiltre = "Genre";
                PreloadService.Hide();
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        }
        
    }


    protected override async Task OnInitializedAsync()
    {
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["sports"] != null)
        {
            SportsSelected = query["sports"].Split(',').ToList();
        }

        if (query["villes"] != null)
        {
            SelectedVilles = query["villes"].Split(',').ToList();
        }

        if (query["genre"] != null)
        {
            SelectedGenre = query["genre"];
        }

        if (bFirstFiltreAnnonces)
        {
            Utilisateur? utilisateurInfo = await localStorage.GetUserFromLocalStorage()!;
            if(utilisateurInfo != null)
            {
                villeUtilisateur = utilisateurInfo.Ville;
                genreUtilisateur = utilisateurInfo.Genre;
                utilisateurId = utilisateurInfo.UtilisateursId;
            }

            if (listGenre.Any()) listGenre.Clear();
            switch (genreUtilisateur)
            {
                case "Homme":
                    listGenre.Add("Homme");
                    listGenre.Add("Mixte");
                    break; 
                case "Femme":
                    listGenre.Add("Femme");
                    listGenre.Add("Mixte");
                    break;

            }
            typeFiltre = "";
            await LoadAnnonces(currentPage);
        }

    }


    private void AllerAAjoutAnnonce()
    {
        /* navigation.NavigateTo($"/SportTogether/Annonces/AjoutAnnonce/{utilisateurID}/{villeDeBase}"); */
        navigation.NavigateTo($"/SportTogether/Annonces/AjoutAnnonce");
    }

    private async Task RechercheSubmit()
    {
        if (!string.IsNullOrWhiteSpace(rechercheModel.Titre))
        {
            if (!bFirstFiltreAnnonces)
            {
                try
                {
                    annonces.Clear();
                    PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
                    annonces = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/titre/{rechercheModel.Titre}/{genreUtilisateur}/{villeUtilisateur}"))!);
                    PreloadService.Hide();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    PreloadService.Hide();
                    Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
                }
            }
        }
        else
        {
            await LoadAnnonces(currentPage);
        }
    }
    private readonly Dictionary<int, (string color, string imageUrl)> sportStyles = new()
    {
        { 1, ("#bfd960", "Football") },
        { 2, ("#391E67", "Basketball") },
        { 4, ("#6B1D4B", "Tennis") },
        { 5, ("#D8AC2C", "Athletisme") },
        { 6, ("#B36EDD", "Gymnastique") },
        { 8, ("#CCF3DB", "Natation") },
        { 9, ("#2C1707", "Baseball") },
        { 10, ("#2A87FD", "Cyclisme") },
        { 11, ("#C084BF", "Volleyball") },
        { 12, ("#A78DA3", "Rugby") },
        { 14, ("#A78DA3", "Boxe") },
        { 15, ("#927584", "Hockey") },
        { 16, ("#9A7C43", "Tennis de table") },
        { 17, ("#033786", "Badminton") },
        { 18, ("#6BDE2A", "Salle de sport") },
        { 21, ("#391E67", "Pétanque") },
        { 22, ("#6B1D4B", "Yoga") },
    };
    public class AnnonceVueWrapper
    {
        [JsonPropertyName("$id")]
        public string Id { get; set; }

        [JsonPropertyName("$values")]
        public List<AnnonceVue> AnnonceVue { get; set; }
    }
}