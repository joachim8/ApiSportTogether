@page "/SportTogether/Annonces"
@using SportTogetherBlazor.Components.Pages.ComposantsReutilisables
@using SportTogetherBlazor.Models
@using SportTogetherBlazor.Services
@using System.Text.Json.Serialization
@using System.Text.Json
@inject NavigationManager navigation
@inject SessionStorageServices session
@inject HttpClient Http
<PageTitle>Annonces | SportTogether</PageTitle>

<nav class="navbar navbar-expand position-static" style="background-color:#eff7f4">
    <div class="container-fluid">
        <div class="collapse navbar-collapse" id="navbarText">
           
            <div class="p-2 col-3"
            <Button Type="ButtonType.Link" Color="ButtonColor.Success" Size="Size.Medium" @onclick="AllerAAjoutAnnonce" TooltipTitle="Ajouter une annonce"> <Icon Name=" IconName.PlusCircle" Color="IconColor.White" /></Button>
            </div>
            <div class="p-2 col-4"
            <EditForm Model="@rechercheModel" OnSubmit="@RechercheSubmit" FormName="RechercheForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group d-flex flex-row">
                    <InputText id="rechercheTitre" class="form-control"
                               @bind-Value="rechercheModel.Titre" placeholder="Recherche..." />
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Light" Size="Size.Medium" TooltipTitle="Rechercher"> <Icon Name=" IconName.Search" /></Button>
                </div>
            </EditForm>
            </div

            <div class="p-2 col-4">
                <div class="btn-group">
                    <div class="px-2">
                        <FiltreParSports SportsSelected="@SportsSelected" OnFilterApplied="RechercherParSport" />
                    </div>
                    <div class="px-2">
                         <FiltreParVille SelectedVilles="@SelectedVilles" OnFilterApplied="RechercherParVille" />
                    </div>
                    <div class="px-2">
                        <FiltreParGenre SelectedGenre="@SelectedGenre" OnFilterApplied="RechercherParGenre" genres="listGenre" />
                       
                    </div>
                </div>
            </div>
 
        </div>
    </div>
</nav>

<div class="container-fluid">
    <!-- Cards Section -->
    <div class="row mt-3">
        @if (annonces != null && annonces.Any())
        {
            @foreach (AnnonceVue annonce in annonces)
            {
                <div class="col-md-4 mb-4 col-sm-6 col-xs-12">
                    <AnnonceCard annonceVue="@annonce" utilisateur="@utilisateurId" />
                </div>
            }
        }
        else if (annonces != null && !annonces.Any())
            {
                <div class="col-12">
                    <p>Aucune annonce trouvée.</p>
                </div>
            }
           
    </div>
</div>

<style>
    .card-header img {
        width: 100%; /* Adjust image width within card */
    }

    .card {
    }
</style>

@code {
    private List<AnnonceVue> annonces;
    private bool bFirstFiltreAnnonces = true;
    [Inject] protected PreloadService PreloadService { get; set; }
    private RechercheModel rechercheModel = new RechercheModel();
    private string? villeUtilisateur;
    private string? genreUtilisateur;

    public int utilisateurId { get; set; }
    public class RechercheModel
    {
        public string Titre { get; set; } = string.Empty;
    }
    [Parameter]
    public List<string> SportsSelected { get; set; } = new List<string>();
    [Parameter]
    public List<string> SelectedVilles { get; set; } = new List<string>();
    [Parameter]
    public string SelectedGenre { get; set; } = string.Empty;

    public List<string> listGenre = new();
    private bool showFilterSports = false;

    private void ToggleFilterSports()
    {
        showFilterSports = !showFilterSports;
    }

    private async Task RechercherParSport(List<string> selectedSports)
    {
        if (selectedSports.Count == 0)
        {
            // Handle the case where no sports are selected, if needed
            return;
        }

        SportsSelected = selectedSports;
        string sports = string.Join(",", SportsSelected);
        try
        {
            annonces.Clear();
            annonces = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/sports/{sports}/{villeUtilisateur}/{genreUtilisateur}"))!);
            PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
         
                PreloadService.Hide();
                StateHasChanged();

        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        }
    }
    private async Task RechercherParVille(List<string> selectedVilles)
    {
        if (selectedVilles.Count == 0)
        {
            return;
        }

        SelectedVilles = selectedVilles;
        string villes = string.Join(",", SelectedVilles);
        try
        {
            annonces.Clear();
            PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
            annonces = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/villes/{villes}/{genreUtilisateur}"))!);
            PreloadService.Hide();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        }
    }
    private async Task RechercherParGenre(string selectedGenre)
    {
        if (string.IsNullOrEmpty(selectedGenre))
        {
            return;
        }

        SelectedGenre = selectedGenre;
        try
        {
            annonces.Clear();
            PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
            annonces = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/genre/{selectedGenre}/{villeUtilisateur}"))!);
            PreloadService.Hide();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {

        if (bFirstFiltreAnnonces)
        {
            Utilisateur utilisateurInfo = session.GetUserFromSession()!;
            villeUtilisateur = utilisateurInfo.Ville;
            genreUtilisateur = utilisateurInfo.Genre;
            utilisateurId = utilisateurInfo.UtilisateursId;
            if (listGenre.Any()) listGenre.Clear();
            switch (genreUtilisateur)
            {
                case "Homme":
                    listGenre.Add("Homme");
                    listGenre.Add("Mixte");
                    break; 
                case "Femme":
                    listGenre.Add("Femme");
                    listGenre.Add("Mixte");
                    break;

            }
            await LoadAnnonces();
        }

    }

    private async Task LoadAnnonces()
    {

        try
        {
            annonces = (await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/{genreUtilisateur}/{villeUtilisateur}"))!;
            if (annonces.Any())
            {
                bFirstFiltreAnnonces = false;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception lors de l'inscription: {ex.Message}");
        }

    }

    private void AllerAAjoutAnnonce()
    {
        /* navigation.NavigateTo($"/SportTogether/Annonces/AjoutAnnonce/{utilisateurID}/{villeDeBase}"); */
        navigation.NavigateTo($"/SportTogether/Annonces/AjoutAnnonce");
    }

    private async Task RechercheSubmit()
    {
        if (!string.IsNullOrWhiteSpace(rechercheModel.Titre))
        {
            if (!bFirstFiltreAnnonces)
            {
                try
                {
                    annonces.Clear();
                    PreloadService.Show(SpinnerColor.Light, "Recherche en cours...");
                    annonces = ((await Http.GetFromJsonAsync<List<AnnonceVue>>($"/vue/titre/{rechercheModel.Titre}/{genreUtilisateur}/{villeUtilisateur}"))!);
                    PreloadService.Hide();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    PreloadService.Hide();
                    Console.WriteLine($"Exception lors de l'appel API: {ex.Message}");
                }
            }
        }
        else
        {
            await LoadAnnonces();
        }
    }

    public class AnnonceVueWrapper
    {
        [JsonPropertyName("$id")]
        public string Id { get; set; }

        [JsonPropertyName("$values")]
        public List<AnnonceVue> AnnonceVue { get; set; }
    }
}