@page "/SportTogether/Mes-annonces/{UserSessionId}"
@using SportTogetherBlazor.Models
@using SportTogetherBlazor.Services
@using System.Linq
@using System.Collections.Generic
@inject IHttpClientFactory HttpClientFactory
@inject LocalStorageServices localStorage

<div class="container h-100">

            <Tabs EnableFadeEffect="true" NavStyle="NavStyle.Underline" Class="custom-tabs" Style="padding-top: 20px; height: 100% !important; background-color: aliceblue !important; color: black !important;">
        <Tab Title="" IsActive="true">
            <TitleTemplate>
                <Icon Name="IconName.Person" /> Mes annonces en tant qu'auteur
            </TitleTemplate>
            <Content>
                <div class="container mt-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <Button Color="ButtonColor.None" Class="sort-button" @onclick="() => SortByTitle(typeAuteur)">
                            <Icon Name="IconName.SortAlphaDown" /> Trier par Titre
                        </Button>
                        <input type="date" class="form-control w-auto" />
                    </div>

                    @if (annoncesAuteur != null && annoncesAuteur.Any())
                    {
                        <div class="row row-cols-1 row-cols-md-2 g-4">
                            @foreach (var annonce in annoncesAuteur)
                            {
                                <div class="col col-sm-12">
                                    <div class="card card-bubble custom-card">
                                        <div class="card-header-pills d-flex justify-content-between align-items-center">
                                            <h3 class="card-title">@annonce.Titre</h3>
                                            <div class="dropdown-button">
                                                <Dropdown Color="DropdownColor.Secondary">
                                                    <DropdownToggleButton>Actions</DropdownToggleButton>
                                                    <DropdownMenu>
                                                        <DropdownItem Type="ButtonType.Button" @onclick="() => SupprimerAnnonce(annonce.AnnoncesId)">Supprimer</DropdownItem>
                                                        <DropdownItem Type="ButtonType.Button" @onclick="() => OuvrirModalModifierAnnonce(annonce)">Modifier</DropdownItem>
                                                    </DropdownMenu>
                                                </Dropdown>
                                            </div>
                                        </div>

                                        <div class="card-body">
                                            <div class="details-section">
                                                <p><strong>Lieu :</strong> @annonce.Lieu</p>
                                                <p>@annonce.Description</p>
                                                <p><strong>Genre attendu :</strong> @annonce.GenreAttendu</p>
                                                <p><strong>Sport :</strong> @annonce.SportName</p>
                                                <p><strong>Date :</strong> Le @annonce.DateHeureAnnonce.ToString("dd/MM/yyyy") à @annonce.DateHeureAnnonce.ToString("HH:mm")</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">Aucune annonce trouvée. Veuillez en créer des nouvelles.</div>
                    }
                </div>
            </Content>
        </Tab>

                <Tab>
                    <TitleTemplate>
                        <Icon Name="IconName.PersonArmsUp" /> Mes annonces en tant que participant
                    </TitleTemplate>
                    <Content>
                        <div class="container mt-4">
                            <Button Color="ButtonColor.None" Class="mb-2 mt-2 align-content-start" @onclick="() => SortByTitle(typeParticipant)">
                                <Icon Name="IconName.SortAlphaDown" /> Trier par Titre
                            </Button>

                            @if (annoncesParticipant != null && annoncesParticipant.Any())
                            {

        
                                <div class="row row-cols-1 row-cols-md-2 g-4">
                                    @foreach (var annonce in annoncesParticipant)
                                    {
                                    <div class="col col-sm-12">
                                        <div class="card card-bubble custom-card">
                                            <div class="card-header-pills d-flex justify-content-between align-items-center">
                                                <h3 class="card-title">@annonce.Titre</h3>
                                                <div class="dropdown-button">
                                                                        @if (annonce.isParticipate)
                                                                        {
                                                        <Button Color="ButtonColor.Danger" @onclick="() => ShowRemoveParticipationModal(annonce)" Size="Size.Small">
                                                            <Icon Name="IconName.X"></Icon>
                                                        </Button>
                                                                        }
                                                                        else
                                                                        {
                                                        <Button Color="ButtonColor.Success" @onclick="() => ShowAddParticipationModal(annonce)" Size="Size.Small">
                                                            <Icon Name="IconName.Check"></Icon>
                                                        </Button>
                                                                        }
                                               
                                                </div>
                                            </div>

                                            <div class="card-body">
                                                <div class="details-section">
                                                <a href="@($"/SportTogether/Profil-utilisateur-vue/{UserSessionId}?utilisateur={annonce.AuteurId}")" class="text-decoration-none text-secondary mb-4"><Icon Name="IconName.PersonBadge" /> @annonce.Auteur</a>
                                                        <p class="text-muted">@annonce.SportName</p>
                                               
                                                        <p class="text-muted">Le @annonce.DateHeureAnnonce.ToString("dd/MM/yyyy") à @annonce.DateHeureAnnonce.ToString("HH:mm")</p>
                                                        <p>@annonce.Lieu</p>
                                                    
                                                        <p>Nombre de participants: @annonce.NombreParticipants</p>
                                                        <p>Description: @annonce.Description</p>
                                                        <p>Genre attendu: @annonce.GenreAttendu</p>
                                                        <p>Niveau :  @annonce.Niveau </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                            
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">Aucune annonce trouvée. Veuillez en créer des nouvelles.</div>
                            }
                        </div>

                    </Content>
                </Tab>

                <Tab Title="">
                    <TitleTemplate>
                        <Icon Name="IconName.Book" /> Historiques
                    </TitleTemplate>
                    <Content>
                        <div class="container mt-4">

                            @if (historiqueAnnonce != null && historiqueAnnonce.Any())
                            {

                                <div class="row row-cols-1 row-cols-md-2 g-4">
                                    @foreach (var annonce in historiqueAnnonce)
                                    {
                                        <div class="col col-sm-12">
                                            <div class="card card-bubble custom-card">
                                                <div class="card-header-pills d-flex justify-content-between align-items-center">
                                                    <h3 class="card-title">@annonce.Titre</h3>
                                                    <div class="dropdown-button">
                                                            @if (annonce.AuteurId != utilisateurID)
                                                            {
                                                                <Dropdown Color="DropdownColor.Secondary">
                                                                    <DropdownToggleButton>Actions</DropdownToggleButton>
                                                                    <DropdownMenu>
                                                                        <DropdownItem Type="ButtonType.Button" @onclick="() => SignalerAnnonce(annonce.AnnoncesId)">Signaler</DropdownItem>
                                                                        <DropdownItem Type="ButtonType.Button" @onclick="() => AjouterNoteAnnonce(annonce.AnnoncesId)">Ajouter une note</DropdownItem>
                                                                    </DropdownMenu>
                                                                </Dropdown>
                                                            }
                                                        </div>
                                                    </div>

                                                    <div class="card-body">
                                                        <div class="details-section">
                                                            @if (annonce.AuteurId != utilisateurID)
                                                            {
                                                                <a href="@($"/SportTogether/Profil-utilisateur-vue/{UserSessionId}?utilisateur={annonce.AuteurId}")" class="text-decoration-none text-secondary                 m-2"><Icon Name="IconName.PersonBadge" /> @annonce.Auteur</a>
                                                            }
                                                        <p class="text-muted">@annonce.SportName</p>
                                                        <p class="text-muted">Le @annonce.DateHeureAnnonce.ToString("dd/MM/yyyy") à @annonce.DateHeureAnnonce.ToString("HH:mm")</p>
                                                        <p>@annonce.Lieu</p>

                                                        <p>Nombre de participants: @annonce.NombreParticipants</p>
                                                        <p>Description: @annonce.Description</p>
                                                        <p>Genre attendu: @annonce.GenreAttendu</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">Aucune annonce trouvée. Veuillez en créer des nouvelles.</div>
                            }
                        </div>

                    </Content>
                </Tab>
            </Tabs>
</div>
@if (totalPages > 1)
{
    <Pagination ActivePageNumber="@currentPage"
                TotalPages="@totalPages"
                DisplayPages="5"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight"
                PageChanged="PageChanged" />
}
<!-- Modals for Participation Confirmation -->
<Modal @ref="addParticipationModal" Title="Confirmer la participation" IsVerticallyCentered="true">
    <BodyTemplate>
        <p>Voulez-vous vraiment participer à l'annonce '@selectedAnnonce.Titre' ?</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideAddParticipationModal">Annuler</Button>
        <Button Color="ButtonColor.Success" @onclick="AddParticipation">Confirmer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="removeParticipationModal" Title="Confirmer la désinscription" IsVerticallyCentered="true">
    <BodyTemplate>
        <p>Voulez-vous vraiment vous désinscrire de l'annonce '@selectedAnnonce.Titre' ?</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideRemoveParticipationModal">Annuler</Button>
        <Button Color="ButtonColor.Danger" @onclick="RemoveParticipation">Confirmer</Button>
    </FooterTemplate>
</Modal>
<Modal @ref="modifierAnnonceModal" title="Modifier l'annonce" IsVerticallyCentered="true">
    <BodyTemplate>
        <SportTogetherBlazor.Components.Pages.Formulaires.FrmModifierAnnonce annonce="selectedAnnonce" Annuler="FermerModal" OnSubmit="SubmitModification" />
    </BodyTemplate>

</Modal>
<ConfirmDialog @ref="dialog" />
<style>
    .nav-underline .nav-link.active {
        background-color: #085f63;
        color: white;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        padding: 10px;
        text-align: center;
    }

    .nav-link {
        background-color: aliceblue;
        color: black;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        padding: 10px;
        text-align: center;
    }

    .nav-link:hover {
        background-color: lightgray;
        color: black;
    }

    .custom-card {
        background-color: rgba(8, 95, 99, 0.5); /* Couleur avec opacité */
        border-radius: 20px;
        padding: 15px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        transition: transform 0.3s ease;
        width: 100%; /* Prend toute la largeur disponible */
    }

        .custom-card:hover {
            transform: translateY(-5px);
        }

    .card-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: white;
        margin: 0;
    }

    .dropdown-button {
        position: relative;
    }

    .details-section {
        margin-top: 15px;
        padding: 10px;
        background-color: rgba(255, 255, 255, 0.1); /* Légère transparence */
        border-radius: 10px;
        color: white;
        font-size: 1.1rem;
    }

        .details-section p {
            margin-bottom: 10px;
        }

    .sort-button {
        color: black;
        border: 1px solid white;
        background-color: transparent;
    }

    input[type="date"] {
        background-color: rgba(255, 255, 255, 0.3);
        border: 1px solid #fff;
        border-radius: 5px;
        color: white;
        padding: 5px;
    }

        input[type="date"]::-webkit-calendar-picker-indicator {
            filter: invert(1);
        }


   
</style>


@code {
    #region "Variable"
    [Parameter]
    public string UserSessionId { get; set; }
    private List<AnnonceVue> annoncesAuteur;
    private List<AnnonceVue> annoncesParticipant;
    private List<AnnonceVue> historiqueAnnonce;
    private int utilisateurID;
    private Modal addParticipationModal = default!;
    private Modal removeParticipationModal = default!;
    private Modal modifierAnnonceModal = default!;
    private ConfirmDialog dialog;
    private AnnonceVue selectedAnnonce = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    private HttpClient Http;
    private const string typeParticipant = "participant";
    private const string typeAuteur = "auteur";
    private bool boolAscString = true;

    private bool boolAscDate = true;

    private bool firstAscDesc = true;
    private bool _firstRender= true;
    private int currentPage = 1;
    private int totalPages = 1;
    private int annoncesPerPage = 12;
    private string typeFiltre = string.Empty;
    #endregion
    #region "Init"
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstRender) // Eviter les appels multiples
        {
            _firstRender = false;
            utilisateurID = (await localStorage.GetUserFromLocalStorage()).UtilisateursId;
            Http = HttpClientFactory.CreateClient("ApiSportTogetherClient");
            try
            {
                annoncesAuteur = await GetAnnoncesAuteurAsync(utilisateurID);
            }
            catch (Exception ex)
            {
                // Gérer les exceptions spécifiques si besoin
                // Par exemple, loguer l'erreur ou montrer un message à l'utilisateur
            }

            try
            {
                annoncesParticipant = await GetAnnoncesParticipantAsync(utilisateurID);
                if (annoncesParticipant.Any())
                {
                    foreach (AnnonceVue annonceV in annoncesParticipant)
                    {
                        annonceV.isParticipate = await CheckIfParticipant(annonceV.AnnoncesId);
                    }
                }
            }
            catch (Exception ex)
            {
                // Gérer les exceptions spécifiques si besoin
                // Par exemple, loguer l'erreur ou montrer un message à l'utilisateur
            }

            try
            {
                historiqueAnnonce = await GetAnnoncesHistoriqueAsync(utilisateurID);
            }
            catch (Exception ex)
            {
                // Gérer les exceptions spécifiques si besoin
                // Par exemple, loguer l'erreur ou montrer un message à l'utilisateur
            }
            StateHasChanged();
        }
    }
 
    #endregion
    #region "GetAnnonces"
    public async Task<List<AnnonceVue>> GetAnnoncesAuteurAsync(int utilisateurID)
    {
        var response = await Http.GetAsync($"/annonces/auteur/{utilisateurID}/{currentPage}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<AnnonceVue>>() ?? new List<AnnonceVue>();
        }
        else
        {
            await HandleErrorResponse(response);
            return new List<AnnonceVue>(); // Ou vous pouvez lancer une exception personnalisée
        }
    }

    public async Task<List<AnnonceVue>> GetAnnoncesParticipantAsync(int utilisateurID)
    {
        var response = await Http.GetAsync($"/annonces/participant/{utilisateurID}/{currentPage}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<AnnonceVue>>() ?? new List<AnnonceVue>();
        }
        else
        {
            await HandleErrorResponse(response);
            return new List<AnnonceVue>(); // Ou vous pouvez lancer une exception personnalisée
        }
    }
    public async Task<List<AnnonceVue>> GetAnnoncesHistoriqueAsync(int utilisateurID)
    {
        var response = await Http.GetAsync($"/annonces/historique/{utilisateurID}/{currentPage}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<AnnonceVue>>() ?? new List<AnnonceVue>();
        }
        else
        {
            await HandleErrorResponse(response);
            return new List<AnnonceVue>(); // Ou vous pouvez lancer une exception personnalisée
        }
    }
    private async Task HandleErrorResponse(HttpResponseMessage response)
    {
        var errorContent = await response.Content.ReadAsStringAsync();
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            // Gérer Not Found (404)
            // Par exemple, loguer l'erreur ou montrer un message à l'utilisateur
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            // Gérer Bad Request (400)
            // Par exemple, loguer l'erreur ou montrer un message à l'utilisateur
        }
        else
        {
            // Gérer d'autres codes d'erreur
        }
    }
    #endregion
    #region "SuppressionAnnonce"
    private async Task SupprimerAnnonce(int annonceId)
    {
        AnnonceVue av = annoncesAuteur.Where(aa => aa.AnnoncesId == annonceId).FirstOrDefault()!;
        var confirmation = await dialog.ShowAsync(
           title: "Etes vous sur de vouloir supprimer cette annonce ?",
           message1: $"L'annonce : {av.Titre}, qui aura lieu dans la ville de {av.Ville} ");
        if (confirmation)
        {
            await deleteAnnonceApi(annonceId);
        }

    }
    private async Task deleteAnnonceApi(int annonceId)
    {
        var response = await Http.DeleteAsync($"Annonce/{annonceId}");
        if (response.IsSuccessStatusCode)
        {
            annoncesAuteur.Remove(selectedAnnonce);
            ToastService.Notify(new(ToastType.Success, $"L'annonce '{selectedAnnonce.Titre}' a bien été supprimé."));
            StateHasChanged();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ToastService.Notify(new(ToastType.Danger, $"Erreur lors de la suppression de votre annonce : {errorMessage}"));
        }
    }
    private async Task SignalerAnnonce(int annonceId)
    {
        
    }
    private async Task AjouterNoteAnnonce(int annonceId)
    {
        
    }
    #endregion
    #region "ModificationAnnonce"
    private Annonce ConvertAnnonceVueToAnnonce(AnnonceVue annonceVue)
    {
        return new Annonce
            {
                AnnoncesId = annonceVue.AnnoncesId,
                Auteur = annonceVue.AuteurId, // Mapping de l'auteur
                SportId = annonceVue.SportId,
                Titre = annonceVue.Titre,
                Description = annonceVue.Description,
                GenreAttendu = annonceVue.GenreAttendu,
                NombreParticipants = annonceVue.NombreParticipants,
                Ville = annonceVue.Ville,
                Lieu = annonceVue.Lieu,
                DateHeureAnnonce = annonceVue.DateHeureAnnonce
            };
    }
    //Fonction pour ouvrir la modal de modification
    private async Task OuvrirModalModifierAnnonce(AnnonceVue annonce)
    {
        selectedAnnonce = annonce;
        await modifierAnnonceModal.ShowAsync();
    }

    // Fonction pour fermer la modal
    private async Task FermerModal()
    {
        await modifierAnnonceModal.HideAsync();
    }

    // Fonction pour soumettre la modification
    private async Task SubmitModification()
    {
        await FermerModal();
        if (selectedAnnonce == null)
        {
            Console.WriteLine("Aucune annonce sélectionnée.");
            return;
        }

        // Conversion de l'annonce vue en annonce à soumettre
        var annonceModifiee = ConvertAnnonceVueToAnnonce(selectedAnnonce);

        // Vérification basique avant l'envoi
        if (annonceModifiee == null || annonceModifiee.AnnoncesId <= 0)
        {
            Console.WriteLine("Annonce non valide.");
            return;
        }



        try
        {
            var response = await Http.PutAsJsonAsync($"Annonce/{annonceModifiee.AnnoncesId}", annonceModifiee);

            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new(ToastType.Success, $"Votre annonce {annonceModifiee.Titre} a bien été modifiée."));
                // Logique de mise à jour UI ou redirection
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                Console.WriteLine("Erreur de validation des données envoyées.");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine("Annonce non trouvée.");
            }
            else
            {
                Console.WriteLine($"Erreur inattendue : {response.StatusCode}");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Erreur de requête HTTP : {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Une erreur est survenue : {ex.Message}");
        }
    }
    #endregion
    #region "Modal et participation"

    private async Task ShowAddParticipationModal(AnnonceVue annonce)
    {
        selectedAnnonce = annonce;
        annonce.isParticipate = true;
        await addParticipationModal.ShowAsync();
    }

    private async Task HideAddParticipationModal()
    {
        await addParticipationModal.HideAsync();
    }

    private async Task ShowRemoveParticipationModal(AnnonceVue annonce)
    {
        selectedAnnonce = annonce;
        annonce.isParticipate = false;
        await removeParticipationModal.ShowAsync();
    }

    private async Task HideRemoveParticipationModal()
    {
        await removeParticipationModal.HideAsync();
    }

    private async Task AddParticipation()
    {
        await HideAddParticipationModal();

        var participation = new Participation
            {
                AnnonceId = selectedAnnonce.AnnoncesId,
                UtilisateurId = utilisateurID,
                DateParticipation = DateTime.Now
            };

        var response = await Http.PostAsJsonAsync("Participation/CreateParticipation", participation);
        if (response.IsSuccessStatusCode)
        {
            selectedAnnonce.NombreParticipants++;
            ToastService.Notify(new(ToastType.Success, $"Votre participation à l'annonce '{selectedAnnonce.Titre}' est bien enregistrée"));
            StateHasChanged();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ToastService.Notify(new(ToastType.Danger, $"Erreur lors de l'enregistrement de votre participation : {errorMessage}"));
        }
    }

    private async Task RemoveParticipation()
    {
        await HideRemoveParticipationModal();

        var participation = new Participation
            {
                AnnonceId = selectedAnnonce.AnnoncesId,
                UtilisateurId = utilisateurID
            };

        var response = await Http.PostAsJsonAsync("Participation/DeleteParticipation", participation);
        if (response.IsSuccessStatusCode)
        {
            selectedAnnonce.NombreParticipants--;
            ToastService.Notify(new(ToastType.Success, $"Votre désinscription de l'annonce '{selectedAnnonce.Titre}' a été confirmée"));
            StateHasChanged();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ToastService.Notify(new(ToastType.Danger, $"Erreur lors de la désinscription : {errorMessage}"));
        }
    }

    private async Task<bool> CheckIfParticipant(int annonceId)
    {
        return await Http.GetFromJsonAsync<bool>($"Participation/CheckParticipation/{utilisateurID}/{annonceId}");
    }
    #endregion
    #region "SortBy"

    private void SortByTitle(string typeAnnonce)
    {
        if (!firstAscDesc) 
            boolAscString = false;



        if(typeAnnonce == null)
        {
            return;
        }
        // Logique de tri par titre
        if (typeAnnonce == string.Empty) return;

        switch (typeAnnonce)
        {
            case typeAuteur :
                if (firstAscDesc)
                {
                    annoncesAuteur = annoncesAuteur.OrderBy(aa => aa.Titre).ToList();
                    firstAscDesc = false;
                    StateHasChanged();
                }
                else
                {
                    if (!boolAscString)
                    {
                        annoncesAuteur = annoncesAuteur.OrderByDescending(aa => aa.Titre).ToList();
                        firstAscDesc = true;
                        StateHasChanged();
                    }
                }
                break;
                case typeParticipant :
                if (firstAscDesc)
                {
                    annoncesParticipant = annoncesParticipant.OrderBy(aa => aa.Titre).ToList();
                    StateHasChanged();
                }
                else
                {
                    if (!boolAscString)
                    {
                        annoncesParticipant = annoncesParticipant.OrderByDescending(aa => aa.Titre).ToList();
                        firstAscDesc = true;
                        StateHasChanged();
                    }
                }
                break;
        }

    }

    private void SortByDate()
    {
        // Logique de tri par date
    }
    #endregion

    // Méthode appelée lors du changement de page
    private async Task PageChanged(int newPage)
    {
        switch (typeFiltre)
        {
            case "GeAuteurnre":
                await GetAnnoncesAuteurAsync(utilisateurID);
                break;

            case "Participant":
                await GetAnnoncesAuteurAsync(utilisateurID);
                break;
            case "Historique":
                await GetAnnoncesAuteurAsync(utilisateurID);
                break;
           
        }

    }
    
}
