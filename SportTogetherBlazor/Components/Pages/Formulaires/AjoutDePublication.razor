@using System.Net.Http.Headers
@inject HttpClient Http
@using SportTogetherBlazor.Models


<div class="card" style="background-color: #f8f9fa;">
    <div class="card-body">
        <h3 class="text-center">Ajouter une publication</h3>

        <EditForm Model="publicationRequest" OnValidSubmit="SubmitPublicationAsync" class="d-flex align-items-center gap-2">
            <DataAnnotationsValidator />
            <ValidationSummary />
          
            <!-- Zone de texte pour le contenu de la publication -->
            <div class="form-group mb-0 flex-grow-1">
                <InputTextArea id="contenu" @bind-Value="publicationRequest.Publication.Contenu" class="form-control" placeholder="Exprimez-vous ici..." />
            </div>

            <!-- InputFile sous forme d'icône trombone -->
            <div class="form-group mb-0 position-relative">
                <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" TooltipTitle="Ajouter une image ou une vidéo.">
                    <Icon Name="IconName.Paperclip" Color="IconColor.Light"></Icon> <!-- Icône trombone -->
                    <InputFile OnChange="OnInputFileChange" multiple style="opacity: 0; position: absolute; left: 0; top: 0; width: 100%; height: 100%;" />
                </Button>
            </div>

            <!-- Bouton pour soumettre la publication -->
            <div class="form-group mb-0">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" TooltipTitle="Publier">
                    <Icon Name="IconName.AirplaneFill" Color="IconColor.Light"></Icon>
                </Button>
            </div>
        </EditForm>
    </div>
    <div class=" card-footer">
        <!-- Affichage des badges pour chaque sport -->
        <div class="mb-3">
            @foreach (var sport in listSport)
            {
                <Badge Color="@(publicationRequest.Publication.SportTag == sport ? BadgeColor.Primary : BadgeColor.Secondary)" Style="cursor: pointer;" @onclick="() => AddSportTag(sport)">
                    @sport
                </Badge>
            }
        </div>
    </div>
</div>


<!-- Affichage des fichiers sélectionnés en italique et petit -->
@if (uploadedFiles.Any())
{
    <div class="mt-2" style="font-size: small; font-style: italic;">
        <p>@($"{uploadedFiles.Count} fichier(s) sélectionné(s)")</p>
        <ul class="list-unstyled">
            @foreach (var file in uploadedFiles)
            {
                <li>@file.Name</li>
            }
        </ul>
    </div>
}


@code {
    [Parameter] public int UtilisateurId { get; set; }
    [Parameter] public EventCallback OnPublicationAdded { get; set; }
    private PublicationAjoutVue publicationRequest = new PublicationAjoutVue();
    private List<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private bool isSubmitting = false;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    private List<string> listSport = new();

    protected override async Task OnInitializedAsync()
    {
        publicationRequest.Publication = new();
        listSport = new()
        {
            "Football",
            "Basketball",
            "Tennis",
            "Athlétisme",
            "Gymnastique",
            "Natation",
            "Baseball",
            "Cyclisme",
            "Volleyball",
            "Rugby",
            "Boxe",
            "Hockey sur glace",
            "Tennis de table",
            "Badminton",
            "Arts martiaux mixtes",
            "Pétanque",
            "Yoga"
        };


    }

    // Fonction pour uploader les fichiers (images et vidéos) et récupérer les URLs
    private async Task<List<string>> UploadFilesAsync()
    {
        List<string> fileUrls = new List<string>();

        if (uploadedFiles.Count == 0)
        {
            return fileUrls;
        }

        try
        {
            var content = new MultipartFormDataContent();

            foreach (var file in uploadedFiles)
            {
                var fileContent = new StreamContent(file.OpenReadStream(10 * 1024 * 1024)); // Limite à 10 MB par fichier
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "Files", file.Name);

                // Déterminer le type de média basé sur l'extension du fichier
                var mediaType = file.ContentType.StartsWith("image") ? "image" : "video";
                content.Add(new StringContent(mediaType), "MediaType");
            }

            // Envoyer la requête POST à l'API d'upload
            var response = await Http.PostAsync("http://localhost:5400/ApiImageSportTogether/Images/upload", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<string>>();
                if (result != null)
                {
                    fileUrls = result;
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erreur lors de l'upload des fichiers: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Une erreur est survenue lors de l'upload des fichiers : {ex.Message}");
        }

        return fileUrls;
    }
    // Ajouter le sport sélectionné au SportTag de la publication
    private void AddSportTag(string sport)
    {

        publicationRequest.Publication.SportTag = sport;

    }

    // Fonction pour soumettre la publication
    private async Task SubmitPublicationAsync()
    {
        isSubmitting = true;

        try
        {
            // Uploader les fichiers et récupérer les URLs
            var uploadedUrls = await UploadFilesAsync();
            Publication? publicationAjouter = null;
            // Créer l'objet PublicationAjoutVue
            var publicationAjoutVue = new PublicationAjoutVue
                {
                    Publication = new Publication
                    {
                        Contenu = publicationRequest.Publication.Contenu,
                        UtilisateurId = UtilisateurId,
                        DatePublication = DateTime.Now,
                        SportTag = publicationRequest.Publication.SportTag
                    },
                    MediaUrls = uploadedUrls
                };

            // Envoyer la publication avec les URLs des médias à l'API
            var response = await Http.PostAsJsonAsync("Publication/AjouterPublicationAvecMedias", publicationAjoutVue);
           
            if (response.IsSuccessStatusCode)
            {
                publicationAjouter = publicationAjoutVue.Publication;
                // Réinitialiser le formulaire après succès
                publicationRequest = new PublicationAjoutVue();
                publicationRequest.Publication = new Publication();
                uploadedFiles.Clear();
               
                if(publicationAjouter != null)
                {
                    ToastService.Notify(new(ToastType.Success, $"Votre publication {publicationAjoutVue.Publication.Contenu} a bien été publier."));

                }

            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ToastService.Notify(new(ToastType.Danger, $"Échec de l'ajout de la publication {publicationAjoutVue.Publication.Contenu}. Exception : {errorMessage}"));
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Échec de l'ajout de la publication. Exception : {ex.Message}"));
        }
        finally
        {
            isSubmitting = false;
            await OnPublicationAdded.InvokeAsync();
        }
    }

    // Fonction pour gérer l'upload des fichiers
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadedFiles.Clear(); // Réinitialiser les fichiers précédemment uploadés
        foreach (var file in e.GetMultipleFiles())
        {
            uploadedFiles.Add(file);
        }
    }

    // Modèle de réponse pour l'upload
    public class UploadResponse
    {
        public List<string>? UploadedFiles { get; set; }
    }
}

