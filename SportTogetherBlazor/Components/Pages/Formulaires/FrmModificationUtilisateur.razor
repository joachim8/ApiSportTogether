@inject HttpClient httpClient
@using Microsoft.AspNetCore.Identity
@using SportTogetherBlazor.Models
@inject NavigationManager NavigationManager

@using System.Text.Json.Serialization;
<div class="container-fluid mt-2">
    <EditForm Model="@utilisateurPourModif" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card shadow-sm">
            <div class="card-body">
                <h4 class="card-title text-center mb-4">Modifier le profil</h4>

                <div class="row">
                    <!-- Colonne de gauche -->
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label class="small text-muted">Nom :</label>
                            <InputText @bind-Value="utilisateurPourModif.Nom" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Prénom :</label>
                            <InputText @bind-Value="utilisateurPourModif.Prenom" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Pseudo :</label>
                            <InputText @bind-Value="utilisateurPourModif.Pseudo" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Genre :</label>
                            <InputSelect id="genre" class="form-control" @bind-Value="utilisateurPourModif.Genre">
                                <option value="Femme">Femme</option>
                                <option value="Homme">Homme</option>
                            </InputSelect>
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Ville :</label>
                            <InputText id="rechercheVille" class="form-control" @bind-Value="utilisateurPourModif.Ville" @oninput="@(async (ChangeEventArgs e) => await RechercherVilles(e.Value.ToString()))" />
                            @if (villes.Any())
                            {
                                <div class="list-group mt-2">
                                    @foreach (var ville in villes)
                                    {
                                        <button type="button" class="list-group-item list-group-item-action"
                                                @onclick="() => SelectionnerVille(ville)">
                                            @ville.Nom
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Âge :</label>
                            <InputNumber id="age" class="form-control" @bind-Value="utilisateurPourModif.Age" min="15" max="100" />
                        </div>
                    </div>

                    <!-- Colonne de droite -->
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label class="small text-muted">Email :</label>
                            <InputText @bind-Value="utilisateurPourModif.Email" type="email" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Ancien mot de passe :</label>
                            <InputText @bind-Value="ancienMotDePasse" type="password" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Nouveau mot de passe :</label>
                            <InputText @bind-Value="nouveauMotDePasse" type="password" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="small text-muted">Confirmer le nouveau mot de passe :</label>
                            <InputText @bind-Value="confirmationMotDePasse" type="password" class="form-control" />
                        </div>
                    </div>
                </div>

                @if (errorMessage != null)
                {
                    <div class="text-danger text-center mb-3">@errorMessage</div>
                }

                <div class="text-center">
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Enregistrer</Button>
                </div>
            </div>
        </div>
    </EditForm>
</div>
@code {
    [Parameter] public Utilisateur utilisateurPourModif { get; set; }

    private string ancienMotDePasse { get; set; }
    private string nouveauMotDePasse { get; set; }
    private string confirmationMotDePasse { get; set; }
    private string? errorMessage { get; set; }
    private List<Ville> villes = new List<Ville>();
    private string rechercheVille { get; set; }


    private async Task HandleValidSubmit()
    {
        // Vérification de l'ancien mot de passe
        var utilisateurActuel = await httpClient.GetFromJsonAsync<Utilisateur>($"utilisateur/{utilisateurPourModif.UtilisateursId}");
        if(ancienMotDePasse != null && ancienMotDePasse != string.Empty)
        {
            if (utilisateurActuel.MotDePasse != HashPassword(ancienMotDePasse))
            {
                errorMessage = "L'ancien mot de passe est incorrect.";
                return;
            }

            // Vérification du nouveau mot de passe et de la confirmation
            if (nouveauMotDePasse != confirmationMotDePasse)
            {
                errorMessage = "Les nouveaux mots de passe ne correspondent pas.";
                return;
            }

            // Mise à jour du mot de passe si tout est correct
            if (!string.IsNullOrWhiteSpace(nouveauMotDePasse))
            {
                utilisateurPourModif.MotDePasse = nouveauMotDePasse;
            }
        }
        else
        {
            utilisateurPourModif.MotDePasse = utilisateurActuel.MotDePasse;
        }


        // Envoi de la mise à jour au serveur
        var response = await httpClient.PutAsJsonAsync($"utilisateur/{utilisateurPourModif.UtilisateursId}", utilisateurPourModif);

        if (response.IsSuccessStatusCode)
        {
            if (ancienMotDePasse != null && ancienMotDePasse != string.Empty)
            {
                NavigationManager.NavigateTo("/SportTogether/Connexion");
            }
            else
            {
                utilisateurActuel = await httpClient.GetFromJsonAsync<Utilisateur>($"utilisateur/{utilisateurPourModif.UtilisateursId}");
                utilisateurPourModif = utilisateurActuel;
                StateHasChanged();
            }
        }
        else
        {
            errorMessage = "Une erreur est survenue lors de la mise à jour.";
        }
    }


    public class Ville
    {
        public string Nom { get; set; }
        public string CodeDepartement { get; set; }
    }
    private void SelectionnerVille(Ville ville)
    {
        utilisateurPourModif.Ville = ville.Nom;
        villes.Clear(); // Cache les suggestions après la sélection
    }
    private async Task RechercherVilles(string recherche)
    {
        if (!string.IsNullOrEmpty(recherche) && recherche.Length >= 2) // Pour éviter des requêtes inutiles
        {
            if (!string.IsNullOrEmpty(recherche) && recherche.Length > 1) // Limite les requêtes pour les recherches de 2 caractères ou plus
            {
                try
                {
                    villes = await httpClient.GetFromJsonAsync<List<Ville>>($"https://geo.api.gouv.fr/communes?nom={recherche}&fields=nom,departement&boost=population&limit=5")!;
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    // Gérez les exceptions, par exemple, en affichant un message d'erreur
                    Console.WriteLine($"Erreur lors de la récupération des villes: {ex.Message}");
                }
            }

        }
    }
    private string HashPassword(string password)
    {
        var hasher = new PasswordHasher<object>();
        return hasher.HashPassword(null, password);
    }
}
