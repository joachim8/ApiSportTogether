@using SportTogetherBlazor.Models
@using System.Net.Http.Json
@using SportTogetherBlazor.Services
@inject IHttpClientFactory HttpClientFactory
@inject TaskNotificationServices NotificationService
@using SportTogetherBlazor.Services
@inject LocalStorageServices localStorage


<div class="card shadow position-relative" style="border-color:#085f63; border-width:4px; border-top-left-radius:15px; border-top-right-radius:15px; box-shadow:10px 5px 5px #085f63;">
    <!-- Card Header with background image and hover effect -->
    <div class="card-header position-relative p-0 overflow-hidden text-white" style="height: 200px; background: url('/images/@GetSportImageUrl((int)annonceVue.SportId!)') center center no-repeat; background-size: cover; border-top-left-radius:10px; border-top-right-radius:10px;">
        <div class="overlay-header"></div>
       

        <!-- User Info: Profile Picture and Pseudo -->
        <div class="user-info d-flex align-items-center position-absolute top-0 w-100 mt-0">
            <div class="profile-pic ">

                <ProfilVueUtilisateurCard Auteur="@annonceVue.Auteur" userId="@annonceVue.AuteurId" sport="@annonceVue.SportName" utilisateurEnCoursId="utilisateur" />
               
              
            </div>
           
        </div>

        <!-- Ville au centre du header -->
        <div class="position-absolute top-0 start-50 translate-middle-x"> <Badge Color="BadgeColor.Light">@annonceVue.Ville</Badge></div>


        <div class="position-absolute top-0 end-0 p-2">
            <Badge Color="BadgeColor.Light">@annonceVue.SportName</Badge>
        </div>
    </div>

    <!-- Card Body with overlapping effect -->
    <div class="card-body text-center bg-light d-grid gap-3"
         style="margin-top: -50px; z-index: 2; position: relative;  padding: 20px; border-top-left-radius:60px; border-top-right-radius: 60px; grid-template-columns: 1fr;">

        <h4 class="card-title">@annonceVue.Titre</h4>

        <!-- Genre Attendu (Icon and Text aligned) -->
        <div class="d-flex align-items-center justify-content-center gap-1">
            <Icon Name="IconName.GenderAmbiguous" Style="color:#34495e" ></Icon>
            <p class="m-0">@annonceVue.GenreAttendu</p>
        </div>

        <!-- Description -->
        <div class="d-flex align-items-center justify-content-center">
            <p class="card-text text-wrap">@annonceVue.Description</p>
        </div>

        <!-- Lieu (Icon and Text aligned) -->
        <div class="d-flex align-items-center justify-content-center gap-1">
            <Icon Name="IconName.PinMap" Style="color:#34495e"></Icon>
            <p class="m-0">@annonceVue.Lieu</p>
        </div>
        <!-- Lieu (Icon and Text aligned) -->
        <div class="d-flex align-items-center justify-content-center gap-1">
            <Icon Name="IconName.StarFill" Style="color:#34495e"></Icon>
            <p class="m-0">@annonceVue.Niveau</p>
        </div>

    </div>


    <!-- Card Footer (unchanged) -->
    <div class="card-footer bg-transparent">
        <!-- Affichage de la date dans un badge avec couleur variable -->
        <Badge Color="@GetBadgeColor(annonceVue.DateHeureAnnonce)" IndicatorType="BadgeIndicatorType.RoundedPill">
            @annonceVue.DateHeureAnnonce.ToString("dd/MM/yyyy") à @annonceVue.DateHeureAnnonce.ToString("HH:mm")
        </Badge>
       
        <div class="d-flex justify-content-between align-items-center">
            <p class="m-0">Nombre de participants : @nombreDeParticipants / @annonceVue.NombreParticipants</p>
            @if (!isAuteur)
            {
                @if (isParticipant)
                {
                    <Button Color="ButtonColor.Danger" @onclick="ShowRemoveParticipationModal" TooltipTitle="Se désinscrire">
                        <Icon Name="IconName.X" Size="IconSize.x4"></Icon>
                    </Button>
                }
                else
                {
                    <Button Color="ButtonColor.Success" @onclick="ShowAddParticipationModal" TooltipTitle="Participer">
                        <Icon Name="IconName.Check" Size="IconSize.x4"></Icon>
                    </Button>
                }
            }
        </div>
    </div>
</div>



<Modal @ref="addParticipationModal" title="Confirmer la participation" IsVerticallyCentered="true">
    <BodyTemplate>
        <p>Voulez-vous vraiment participer à l'annonce '@annonceVue.Titre' ?</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideAddParticipationModal">Annuler</Button>
        <Button Color="ButtonColor.Success" @onclick="AddParticipation">Confirmer</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="removeParticipationModal" title="Confirmer la désinscription" IsVerticallyCentered="true">
    <BodyTemplate>
        <p>Voulez-vous vraiment vous désinscrire de l'annonce '@annonceVue.Titre' ?</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideRemoveParticipationModal">Annuler</Button>
        <Button Color="ButtonColor.Danger" @onclick="RemoveParticipation">Confirmer</Button>
    </FooterTemplate>
</Modal>


<!-- ProfileViewModal Component -->
<style>
    .card-header:hover{
        cursor:pointer;
    }
</style>


@code {
    [Parameter]
    public AnnonceVue annonceVue { get; set; }
    [Parameter]
    public int utilisateur { get; set; }
    private int nombreDeParticipants;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    private bool isParticipant = false;
    private HttpClient httpClient;
    private bool isAuteur = false;
    private Modal addParticipationModal = default!;
    private Modal removeParticipationModal = default!;


    /// <summary>
    /// Initialisation de la page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        nombreDeParticipants = await httpClient.GetFromJsonAsync<int>($"Participation/Annonce/{annonceVue.AnnoncesId}/count");
        isParticipant = await CheckIfParticipant();
        if(annonceVue.AuteurId == utilisateur)
        {
            isAuteur = true;
        }

    }

    /// <summary>
    /// Ajout d'un participant
    /// </summary>
    /// <returns></returns>
    private async Task ShowAddParticipationModal()
    {
        await addParticipationModal.ShowAsync();
    }

    /// <summary>
    /// Cache le boutton d'ajout de participant
    /// </summary>
    /// <returns></returns>
    private async Task HideAddParticipationModal()
    {
        await addParticipationModal.HideAsync();
    }

    /// <summary>
    /// Affiche le btton se déconnecter
    /// </summary>
    /// <returns></returns>
    private async Task ShowRemoveParticipationModal()
    {
        await removeParticipationModal.ShowAsync();
    }

    /// <summary>
    /// Cache le button se déconnecter
    /// </summary>
    /// <returns></returns>
    private async Task HideRemoveParticipationModal()
    {
        await removeParticipationModal.HideAsync();
    }

    /// <summary>
    /// Fonction d'ajout de participant
    /// </summary>
    /// <returns></returns>
    private async Task AddParticipation()
    {
        await HideAddParticipationModal();

        Participation participation = new Participation
            {
                AnnonceId = annonceVue.AnnoncesId,
                UtilisateurId = utilisateur,
                DateParticipation = DateTime.Now
            };

        var response = await httpClient.PostAsJsonAsync("Participation/CreateParticipation", participation);
        if (response.IsSuccessStatusCode)
        {
            string pseudo = (await localStorage.GetUserFromLocalStorage()).Pseudo;
            string contenu = $"{pseudo} participe a votre annonce {annonceVue.Titre}";

            await SendNotificationToAuthor(contenu);
            StateHasChanged();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ToastService.Notify(new(ToastType.Danger, $"Votre participation à l'annonce '{annonceVue.Titre}' n'a pas pu s'enregistrer. Veuillez réessayer."));
        }
    }
    // Méthode pour envoyer une notification à l'auteur
    private async Task SendNotificationToAuthor(string contenu)
    {
        var notification = new NotificationUtilisateur
            {
                DateNotification = DateTime.Now,
                UtilisateurId = annonceVue.AuteurId,
                TypeNotification = "Participation",
                Contenu = contenu,
                Vu = false
            };

        var result = await NotificationService.CreateNotificationAsync(notification);
        if (result.IsSuccess)
        {

            nombreDeParticipants++;
            ToastService.Notify(new(ToastType.Success, $"Votre participation à l'annonce '{annonceVue.Titre}' est bien enregistrée"));
            isParticipant = true;
        }
       
    }
    /// <summary>
    /// Fonction de suppression de participant
    /// </summary>
    /// <returns></returns>
    private async Task RemoveParticipation()
    {
        await HideRemoveParticipationModal();

        Participation participation = new Participation
            {
                AnnonceId = annonceVue.AnnoncesId,
                UtilisateurId = utilisateur
            };

        var response = await httpClient.PostAsJsonAsync("Participation/DeleteParticipation", participation);
        if (response.IsSuccessStatusCode)
        {
            nombreDeParticipants--;
            isParticipant = false;
            ToastService.Notify(new(ToastType.Warning, $"Participation pour l'annonce '{annonceVue.Titre}' retirée avec succès !"));
            StateHasChanged();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ToastService.Notify(new(ToastType.Danger, $"Erreur lors du retrait de la participation : {errorMessage}"));
        }
    }

    /// <summary>
    /// Check si il y a un participant
    /// </summary>
    /// <returns></returns>
    private async Task<bool> CheckIfParticipant()
    {
        var participe = await httpClient.GetFromJsonAsync<bool>($"Participation/CheckParticipation/{utilisateur}/{annonceVue.AnnoncesId}");
        return participe;
    }

    private readonly Dictionary<int, (string color, string imageUrl)> sportStyles = new()
    {
        { 1, ("#bfd960", "ballon-foot.jpg") },
        { 2, ("#391E67", "basketball.jpg") },
        { 4, ("#6B1D4B", "tennis.jpg") },
        { 5, ("#D8AC2C", "athletisme.jpg") },
        { 6, ("#B36EDD", "gymnastique.jpg") },
        { 8, ("#CCF3DB", "natation.jpg") },
        { 9, ("#2C1707", "baseball.jpg") },
        { 10, ("#2A87FD", "cyclisme.jpg") },
        { 11, ("#C084BF", "volleyball.jpg") },
        { 12, ("#A78DA3", "rugby.jpg") },
        { 14, ("#A78DA3", "boxe.jpg") },
        { 15, ("#927584", "hockey.jpg") },
        { 16, ("#9A7C43", "tennis_table.jpg") },
        { 17, ("#033786", "badminton.jpg") },
        { 18, ("#6BDE2A", "poids-salles.jpg") },
        { 21, ("#391E67", "pétanque.jpg") },
        { 22, ("#6B1D4B", "yoga.jpg") },
    };

    


    /// <summary>
    /// 
    /// </summary>
    /// <param name="sportId"></param>
    /// <returns></returns>
    private string GetSportImageUrl(int sportId)
    {
        return sportStyles.ContainsKey(sportId) ? sportStyles[sportId].imageUrl : "default.jpg";
    }
    private BadgeColor GetBadgeColor(DateTime dateHeureAnnonce)
    {
        var timeDifference = dateHeureAnnonce - DateTime.Now;

        if (timeDifference.TotalDays <= 2 && timeDifference.TotalDays > 0)
        {
            return BadgeColor.Danger; // Badge jaune pour une date dans 1 jour ou moins
        }
        
        else
        {
            return BadgeColor.Warning; // Badge par défaut (bleu) si la date est dans plus d'un jour
        }
    }
}
