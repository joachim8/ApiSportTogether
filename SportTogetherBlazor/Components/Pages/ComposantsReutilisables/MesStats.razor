@using System.Globalization
@using SportTogetherBlazor.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h2 class="text-center mb-4">Mes Statistiques</h2>

<!-- Formulaire de filtrage par mois (centré en haut) -->
<div class="d-flex justify-content-center mb-4">
    <EditForm Model="@filtre" OnValidSubmit="OnFiltrer">
        <div class="form-group mx-2 d-flex align-items-center">
            <InputSelect id="mois" class="form-select me-2" @bind-Value="filtre.Mois">
                @foreach (var mois in moisOptions)
                {
                    <option value="@mois.Value">@mois.Key</option>
                }
            </InputSelect>
            <span>
                <Button Type="ButtonType.Submit" Color="ButtonColor.None" class="btn btn-outline-secondary">
                    <Icon Name="IconName.Search" Color="IconColor.Success" />
                </Button>
            </span>
           
        </div>
       
    </EditForm>
</div>
<div class="mt-4">
    <!-- Card 3: Classement par rapport aux amis -->
    <div class="col-12 mb-4">
        <div class="card shadow-sm">
            <div class="card-header bg-warning text-white text-center">
                <h5 class="mb-0">Classement parmi les amis</h5>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var ami in classementAmis)
                    {
                        <li class="list-group-item d-flex align-items-center @(ami.Pseudo == utilisateurVue.Pseudo ? "bg-light" : "")">
                            <img src="@ami.UrlProfilImage" class="rounded-circle" style="width:40px; height: 40px" alt="profil" />
                            <div class="mx-3">
                                <span class="badge bg-primary rounded-pill">@ami.Classement</span>
                            </div>
                            <span class="text-truncate" style="flex-grow: 1; max-width: 150px;" title="@ami.Pseudo">@ami.Pseudo</span>
                            <span class="ms-2">(@ami.NombreActivites)</span> <!-- Ajouté pour le nombre d'activités -->
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
    <!-- Affichage des statistiques -->
    <div class="row mt-4">
        <!-- Card 1: Top 3 des sports fréquentés -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white text-center">
                    <h5 class="mb-0">Top 3 des sports fréquentés</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var sport in topTroisSport)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @sport
                                <i class="bi bi-trophy text-warning"></i>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

     
    <!-- Card 2: Augmentation du nombre d'annonces -->
    <div class="col-md-6 mb-4">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white text-center">
                <h5 class="mb-0">Augmentation des annonces</h5>
            </div>
            <div class="card-body d-flex justify-content-center align-items-center" style="height: 150px;">
                <div>
                    <h3 class="display-5 text-success">@($"{utilisateurVue.PourcentageAugmentationAnnonceAuteur:F2}%")</h3>
                    <p>par rapport au mois précédent</p>
                </div>
            </div>
        </div>
    </div>
</div>

    <style>
        .text-truncate {
            white-space: nowrap; /* Empêche le passage à la ligne */
            overflow: hidden; /* Cache le texte qui déborde */
            text-overflow: ellipsis; /* Ajoute des points de suspension */
        }
    </style>


@code {
    [Parameter]
    public UtilisateurVue? utilisateurVue { get; set; }
    private List<KeyValuePair<string, int>> moisOptions = new List<KeyValuePair<string, int>>()
    {
        new KeyValuePair<string, int>("Janvier", 1),
        new KeyValuePair<string, int>("Février", 2),
        new KeyValuePair<string, int>("Mars", 3),
        new KeyValuePair<string, int>("Avril", 4),
        new KeyValuePair<string, int>("Mai", 5),
        new KeyValuePair<string, int>("Juin", 6),
        new KeyValuePair<string, int>("Juillet", 7),
        new KeyValuePair<string, int>("Août", 8),
        new KeyValuePair<string, int>("Septembre", 9),
        new KeyValuePair<string, int>("Octobre", 10),
        new KeyValuePair<string, int>("Novembre", 11),
        new KeyValuePair<string, int>("Décembre", 12)
    };

    private StatsFiltre filtre = new StatsFiltre();
    private List<string> topTroisSport = new List<string>();
    private List<ClassementAmi> classementAmis = new List<ClassementAmi>();
    protected override async Task OnInitializedAsync()
    {
        topTroisSport = utilisateurVue.TopTroisSport;
        classementAmis = utilisateurVue.ClassementAmis;
    }
    private async Task ChargerStats()
    {
        var result = await Http.GetFromJsonAsync<UtilisateurVue>($"utilisateur/UtilisateurVueById/{utilisateurVue.UtilisateursId}/mois/{filtre.Mois}/annee/{DateTime.Now.Year}");

        if (result != null)
        {
            topTroisSport = result.TopTroisSport.ToList();
            classementAmis = result.ClassementAmis.ToList();
        }
    }

    private async Task OnFiltrer()
    {
        await ChargerStats();
    }

    private class StatsFiltre
    {
        public int Mois { get; set; } = DateTime.Now.Month;
    }
}
