@page "/publication/{PublicationId:int}"
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable
@using SportTogetherBlazor.Models
@using Microsoft.AspNetCore.SignalR.Client

@code {
    [Parameter] public int PublicationId { get; set; }
    private PublicationVue? publicationVue = null;
    private bool isLoading = true;
    private bool hasError = false;
    private HttpClient httpClient;
    private string error;
    private PublicationCommentaire newCommentaire = new PublicationCommentaire();
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await FetchPublicationDetails(PublicationId);
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/publicationHub")
            .Build();

        // Écouter l'ajout d'un commentaire
        _hubConnection.On<int>("ReceiveCommentAdded", async (commentaireId) =>
        {
            var commentaire = await FetchCommentaireById(commentaireId);
            if (commentaire != null)
            {
                publicationVue.Commentaires.Add(commentaire);
                StateHasChanged(); // Re-render the component
            }
        });

        // Écouter la suppression d'un commentaire
        _hubConnection.On<int>("ReceiveCommentDeleted", async (commentaireId) =>
        {
            // Logique pour supprimer le commentaire de publicationVue.Commentaires
            var commentaire = publicationVue.Commentaires.FirstOrDefault(c => c.CommentaireId == commentaireId);
            if (commentaire != null)
            {
                publicationVue.Commentaires.Remove(commentaire);
                StateHasChanged();
            }
        });

        // Écouter la modification d'une publication
        _hubConnection.On<int>("ReceivePublicationUpdated", async (publicationId) =>
        {
            await FetchPublicationDetails(publicationId);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinPublicationGroup", PublicationId.ToString()); // Rejoindre le groupe

    }
    // Méthode pour récupérer le commentaire par ID
    private async Task<CommentaireVue?> FetchCommentaireById(int commentaireId)
    {
        try
        {
            var response = await httpClient.GetAsync($"PublicationCommentaire/GetCommentaireById/{commentaireId}");
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<CommentaireVue>();
            }
            else
            {
                Console.WriteLine($"Erreur lors de la récupération du commentaire : {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
        return null;
    }
    // Dispose method to stop the SignalR connection
   public void Dispose()
    {
        // Déconnecter de SignalR
        if (_hubConnection != null)
        {
             _hubConnection.SendAsync("LeavePublicationGroup", PublicationId.ToString()); // Quitter le groupe
             _hubConnection.DisposeAsync();
        }

    }
   

    private async Task FetchPublicationDetails(int publicationId)
    {
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        try
        {
            var response = await httpClient.GetAsync($"Publication/GetPublicationVueById/{publicationId}");
            if (response.IsSuccessStatusCode)
            {
                publicationVue = await response.Content.ReadFromJsonAsync<PublicationVue?>();
            }
            else
            {
                error = response.Content.ToString();
                Console.Write(response.Content.ToString());
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.Write(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddCommentaire()
    {
        newCommentaire.PublicationId = PublicationId;
        newCommentaire.DateCommentaire = DateTime.UtcNow;
        // Remplacez `UtilisateurId` par l'ID de l'utilisateur authentifié
        newCommentaire.UtilisateurId = publicationVue.UtilisateurId;

        var response = await httpClient.PostAsJsonAsync("PublicationCommentaire/CreateCommentaire", newCommentaire);

        if (response.IsSuccessStatusCode)
        {
            var addedCommentaire = await response.Content.ReadFromJsonAsync<PublicationCommentaire>();
            newCommentaire = new PublicationCommentaire(); // Réinitialiser le formulaire
            StateHasChanged(); // Re-render the component
        }
        else
        {
            error = "Erreur lors de l'ajout du commentaire.";
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }
}

@if (hasError || publicationVue == null)
{
    <p class="text-danger">Erreur lors du chargement de la publication. Veuillez réessayer plus tard. @error</p>
}
else
{
    <div class="publication border rounded p-3 mb-3 shadow-sm">
        <div class="user-info mb-3 d-flex align-items-center">
            <img src="@publicationVue.ImageUtilisateurUrl" alt="Image de profil" class="user-image rounded-circle me-2" width="50" />
            <span class="fw-bold">@publicationVue.PseudoUtilisateur</span>
            
        </div>
        <div class="temps m-0">
            <p class="text-muted text-sm-start">@publicationVue.tempsDiff</p>
        </div>
        <div class="content mb-3">
            <h3>@publicationVue.Contenu</h3>
            @if (publicationVue.MediaUrls != null && publicationVue.MediaUrls.Count > 0)
            {
                <div class="media">
                    @if (publicationVue.MediaUrls.Count() == 1)
                    {
                        <img src="@publicationVue.MediaUrls[0]" alt="Media" class="img-thumbnail rounded w-50 h-50" />
                    }
                    else
                    {
                        <div id="mediaCarousel" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-inner">
                                @for (int i = 0; i < publicationVue.MediaUrls.Count; i++)
                                {
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@publicationVue.MediaUrls[i]" alt="Media" class="d-block w-100 rounded" />
                                    </div>
                                }
                            </div>
                            <button class="carousel-control-prev" type="button" data-bs-target="#mediaCarousel" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Précédent</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#mediaCarousel" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Suivant</span>
                            </button>
                        </div>
                    }
                </div>
            }
        </div>

        <div class="encouragements mb-3">
            <Button Color="ButtonColor.None" Type="ButtonType.Button" >
                <span class="fw-bold">@publicationVue.NombreEncouragements</span> 💪
            </Button>
        </div>

        <div class="comments">
            @if (publicationVue.Commentaires != null && publicationVue.Commentaires.Count > 0)
            {
                <h5>Commentaires</h5>
                <ul class="list-unstyled">
                    @foreach (var commentaire in publicationVue.Commentaires)
                    {
                        <li class="border-bottom mb-2 pb-2">
                            <div class="comment-user d-flex align-items-center">
                                <img src="@commentaire.ImageUtilisateurUrl" alt="Image de profil" class="user-image rounded-circle me-2" width="40" />
                                <span class="fw-bold">@commentaire.PseudoUtilisateur</span>
                            </div>
                            <p class="text-muted">@commentaire.Contenu</p>
                            <span class="text-secondary">@commentaire.DateCommentaire.ToShortDateString()</span>
                            <span class="fw-bold">@commentaire.NombreEncouragementCommentaire</span> 💪
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Aucun commentaire pour cette publication.</p>
            }
        </div>

        <h5>Ajouter un commentaire</h5>
        <EditForm Model="@newCommentaire" OnValidSubmit="@AddCommentaire">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <InputText @bind-Value="newCommentaire.Contenu" class="form-control" placeholder="Votre commentaire..." />
            </div>
            <button type="submit" class="btn btn-primary">Ajouter</button>
        </EditForm>
    </div>
}
