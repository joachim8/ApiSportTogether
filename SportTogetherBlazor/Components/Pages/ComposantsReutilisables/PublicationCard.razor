@page "/publication/{PublicationId:int}"
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable
@using SportTogetherBlazor.Models
@using Microsoft.AspNetCore.SignalR.Client
@using SportTogetherBlazor.Services
@inject SessionStorageServices session


@if (hasError || publicationVue == null)
{
    <p class="text-danger">Erreur lors du chargement de la publication. Veuillez réessayer plus tard. @error</p>
}
else
{


    <div class="card shadow-sm mb-4 col-lg-8 col-sm-12 col-md-10" >
        <div class="card-body p-3">
            <!-- Pseudo et nom utilisateur en haut à gauche -->
            <div class="d-flex justify-content-between align-items-center">
                <!-- Section utilisateur -->
                <div class="user-info d-flex align-items-center">
                    <img src="@publicationVue.ImageUtilisateurUrl" alt="Image de profil" class="user-image rounded-circle me-2" width="50" />
                    <span class="card-title mb-0">@publicationVue.PseudoUtilisateur</span>
                </div>

                <!-- Switch centré -->
                <div class="mx-auto">
                    @if (publicationVue.UtilisateurId == utilisateurId)
                    {
                        <Switch @bind-Value="publicationVue.Visibilite"
                                Label="@(publicationVue.Visibilite ? "Public" : "Privée")" @onclick="SwitchChanged" />
                    }
                    
                </div>

                <!-- Section badge et tempsDiff alignée à droite -->
                <div class="text-end my-0">
                    <Dropdown Color="DropdownColor.None">
                        <DropdownToggleButton>
                            <Icon Name="IconName.ThreeDotsVertical" Color="IconColor.Dark" />
                        </DropdownToggleButton>
                        <DropdownMenu>
                            @if (publicationVue.UtilisateurId == utilisateurId)
                            {
                                <DropdownItem Type="ButtonType.Button" @onclick="() => DeletePublication()">Supprimer</DropdownItem>
                            }
                            else
                            {
                                <DropdownItem Type="ButtonType.Button">Signaler</DropdownItem>
                            }
                        </DropdownMenu>
                    </Dropdown>
                    <Button Color="ButtonColor.None" Size="Size.Small"></Button>
                    <p class="card-text text-muted mb-1">@publicationVue.tempsDiff</p>
                    <Badge Color="BadgeColor.Success" Class="text-uppercase">@publicationVue.SportTag</Badge>
                </div>
            </div>



       <div class="media-section mb-3">
    @if (publicationVue.MediaUrls != null && publicationVue.MediaUrls.Count > 0)
    {
        if (publicationVue.MediaUrls.Count == 1)
        {
            // Afficher une seule image
            <div class="image-section">
                <img src="@publicationVue.MediaUrls[0]" class="img-thumbnail rounded" alt="Image publication" style="max-height: 250px; width: 100%;" />
            </div>
        }
        else if (publicationVue.MediaUrls.Count > 1)
        {
          //Afficher un carrousel pour plusieurs images
            <div id="carouselExampleIndicators" class="carousel slide">
                <div class="carousel-indicators">
                    @for (int i = 0; i < publicationVue.MediaUrls.Count; i++)
                    {
                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @(i + 1)"></button>
                    }
                </div>
                <div class="carousel-inner">
                    @for (int i = 0; i < publicationVue.MediaUrls.Count; i++)
                    {
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@publicationVue.MediaUrls[i]" class="d-block w-100" alt="Image publication @(i + 1)" style="max-height: 250px; width: 100%;">
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        }
    }
</div>

            <!-- Contenu et autres informations épurées -->
            <p class="card-text text-muted">@publicationVue.Contenu</p>

            <div class="d-flex justify-content-between align-items-center">
                <!-- Bouton encouragement -->
                @if (publicationVue.IsEncourager)
                {
                    <Button Color="ButtonColor.None" Class="border border-warning" Type="ButtonType.Button" TooltipTitle="Décourager" @onclick="() => SupprimerNombreEncouragement()" Size="Size.Small">
                        @publicationVue.NombreEncouragements 💪
                    </Button>
                }
                else
                {
                    <Button Color="ButtonColor.None" Type="ButtonType.Button" TooltipTitle="Encourager" @onclick="() => AjoutNombreEncouragement()" Size="Size.Small">
                        @publicationVue.NombreEncouragements 💪
                    </Button>
                }

                <!-- Date de publication -->
                <small class="text-muted">@publicationVue.DatePublication.ToShortDateString()</small>
            </div>
        </div>

        <!-- Section des commentaires -->
        <div class="card-footer bg-white">
            @if (publicationVue.Commentaires != null && publicationVue.Commentaires.Count > 0)
            {
                <ul class="list-unstyled">
                    @foreach (var commentaire in publicationVue.Commentaires)
                    {
                        <li class="border-bottom pb-2 mb-2">
                            <div class="d-flex align-items-center">
                                <img src="@commentaire.ImageUtilisateurUrl" class="rounded-circle me-2" width="35" height="35" alt="Image utilisateur" />
                                <strong>@commentaire.PseudoUtilisateur</strong>
                            </div>
                            <p class="small text-muted mb-0">@commentaire.Contenu</p>
                            <small class="text-muted">@commentaire.DateCommentaire.ToShortDateString()</small>
                            @if (commentaire.IsEncouragerCom)
                            {
                                <Button Color="ButtonColor.None" Class="border border-warning" Type="ButtonType.Button" TooltipTitle="Décourager" @onclick="() => SupprimerNombreEncouragementCommentaire(commentaire)" Size="Size.Small">
                                    @commentaire.NombreEncouragementCommentaire  💪
                                </Button>
                            }
                            else
                            {
                                <Button Color="ButtonColor.None" Type="ButtonType.Button" TooltipTitle="Encourager" @onclick="() => AjoutNombreEncouragementCommentaire(commentaire)" Size="Size.Small">
                                    @commentaire.NombreEncouragementCommentaire 💪
                                </Button>
                            }
                           
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">Aucun commentaire pour cette publication.</p>
            }

            <!-- Ajouter un commentaire -->
            <div class="mt-3">
                <h6>Ajouter un commentaire</h6>
                <EditForm Model="@newCommentaire" OnValidSubmit="@AddCommentaire">
                    <DataAnnotationsValidator />
                    <div class="input-group">
                        <InputText @bind-Value="newCommentaire.Contenu" class="form-control" placeholder="Votre commentaire..." />
                        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" ><Icon Name="IconName.AirplaneFill"/></Button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
   
}
<ConfirmDialog @ref="dialog" />
<style>
    .dropdown-toggle::after !important {
        display: none;
    }
</style>

@code {

    #region "Variable"
    [Parameter] public int PublicationId { get; set; }
    [Parameter] public EventCallback<int> OnDelete { get; set; }
    private PublicationVue? publicationVue = null;
    private bool isLoading = true;
    private bool hasError = false;
    private bool isPublic;
    private HttpClient httpClient;
    private string error;
    private PublicationCommentaire newCommentaire = new PublicationCommentaire();
    private HubConnection _hubConnection;
    private int utilisateurId;
    private readonly List<string> imageExtensions = new List<string> { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff" };
    private readonly List<string> videoExtensions = new List<string> { ".mp4", ".avi", ".mov", ".wmv", ".mkv", ".flv", ".webm" };
    private ConfirmDialog dialog;
    [Inject] protected ToastService ToastService { get; set; } = default!;

    #endregion

    #region "Init et dispose"
    protected override async Task OnInitializedAsync()
    {
        await FetchPublicationDetails(PublicationId);
        utilisateurId = session.GetUserFromSession()!.UtilisateursId;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/publicationHub")
            .Build();

        // Écouter l'ajout d'un commentaire
        _hubConnection.On<int>("ReceiveCommentAdded", async (commentaireId) =>
        {
            var commentaire = await FetchCommentaireById(commentaireId);
            if (commentaire != null)
            {
                publicationVue.Commentaires.Add(commentaire);
                // Actualiser l'affichage
                await InvokeAsync(StateHasChanged);
            }
        });

        // Écouter la suppression d'un commentaire
        _hubConnection.On<int>("ReceiveCommentDeleted", async (commentaireId) =>
        {
            // Logique pour supprimer le commentaire de publicationVue.Commentaires
            var commentaire = publicationVue.Commentaires.FirstOrDefault(c => c.CommentaireId == commentaireId);
            if (commentaire != null)
            {
                publicationVue.Commentaires.Remove(commentaire);
                // Actualiser l'affichage
                await InvokeAsync(StateHasChanged);
            }
        });

        // Écouter la modification d'une publication
        _hubConnection.On<int>("ReceivePublicationUpdated", async (publicationId) =>
        {
            await FetchPublicationDetails(publicationId);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinPublicationGroup", PublicationId.ToString()); // Rejoindre le groupe

    }
    // Dispose method to stop the SignalR connection
    public void Dispose()
    {
        // Déconnecter de SignalR
        if (_hubConnection != null)
        {
            _hubConnection.SendAsync("LeavePublicationGroup", PublicationId.ToString()); // Quitter le groupe
            _hubConnection.DisposeAsync();
        }

    }
    #endregion

    #region "Task commentaire"
    /// <summary>
    /// Méthode pour récupérer le commentaire par ID
    /// </summary>
    /// <param name="commentaireId"></param>
    /// <returns></returns>
    private async Task<CommentaireVue?> FetchCommentaireById(int commentaireId)
    {
        try
        {
            var response = await httpClient.GetAsync($"PublicationCommentaire/GetCommentaireById/{commentaireId}");
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<CommentaireVue>();
            }
            else
            {
                Console.WriteLine($"Erreur lors de la récupération du commentaire : {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
        return null;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    private async Task AddCommentaire()
    {
        newCommentaire.PublicationId = PublicationId;
        newCommentaire.DateCommentaire = DateTime.UtcNow;
        // Remplacez `UtilisateurId` par l'ID de l'utilisateur authentifié
        newCommentaire.UtilisateurId = publicationVue.UtilisateurId;

        var response = await httpClient.PostAsJsonAsync("PublicationCommentaire/CreateCommentaire", newCommentaire);

        if (response.IsSuccessStatusCode)
        {
            var addedCommentaire = await response.Content.ReadFromJsonAsync<PublicationCommentaire>();
            newCommentaire = new PublicationCommentaire(); // Réinitialiser le formulaire
            StateHasChanged(); // Re-render the component
        }
        else
        {
            error = "Erreur lors de l'ajout du commentaire.";
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="commentaireVue"></param>
    /// <returns></returns>
    private async Task AjoutNombreEncouragementCommentaire(CommentaireVue commentaireVue)
    {

        EncouragementPublicationCommentaire encouragement = new()
            {
                PublicationCommentaireId = commentaireVue.CommentaireId,
                UtilisateurId = utilisateurId
            };
        try
        {
            var response = await httpClient.PostAsJsonAsync($"EncouragementPublicationCommentaire/CreateEncouragementPublicationCommentaire/", encouragement);

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements du commentaire
                var commentaire = publicationVue.Commentaires.FirstOrDefault(c => c.CommentaireId == encouragement.PublicationCommentaireId);
                if (commentaire != null)
                {
                    commentaire.NombreEncouragementCommentaire++;
                    commentaire.IsEncouragerCom = true; // Met à jour l'état d'encouragement du commentaire
                    StateHasChanged(); // Re-render le composant
                }
            }
            else
            {
                error = "Erreur lors de l'ajout de l'encouragement au commentaire.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="commentaireVue"></param>
    /// <returns></returns>
    private async Task SupprimerNombreEncouragementCommentaire(CommentaireVue commentaireVue)
    {
        // Utilisez l'ID de l'encouragement à supprimer (assurez-vous d'avoir cet ID disponible)
        int encouragementId = commentaireVue.CommentaireId; // Remplacez par l'ID de l'encouragement que vous souhaitez supprimer

        try
        {
            var response = await httpClient.DeleteAsync($"EncouragementPublicationCommentaire/DeleteEncouragementPublicationCommentaire/{encouragementId}/{utilisateurId}");

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements du commentaire
                var commentaire = publicationVue.Commentaires.FirstOrDefault(c => c.CommentaireId == encouragementId);
                if (commentaire != null)
                {
                    commentaire.NombreEncouragementCommentaire--;
                    commentaire.IsEncouragerCom = false; // Met à jour l'état d'encouragement du commentaire
                    StateHasChanged(); // Re-render le composant
                }
            }
            else
            {
                error = "Erreur lors de la suppression de l'encouragement au commentaire.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }
    #endregion
    #region "Task Publication"
    /// <summary>
    /// 
    /// </summary>
    /// <param name="publicationId"></param>
    /// <returns></returns>
    private async Task FetchPublicationDetails(int publicationId)
    {
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        try
        {
            var response = await httpClient.GetAsync($"Publication/GetPublicationVueById/{publicationId}");
            if (response.IsSuccessStatusCode)
            {
                publicationVue = await response.Content.ReadFromJsonAsync<PublicationVue?>();
                isPublic = publicationVue.Visibilite;
            }
            else
            {
                error = response.Content.ToString();
                Console.Write(response.Content.ToString());
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.Write(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    private async Task AjoutNombreEncouragement()
    {
        EncouragementPublication encouragement = new()
            {
                PublicationId = PublicationId,
                UtilisateurId = utilisateurId // Remplacez par l'ID de l'utilisateur authentifié
            };

        try
        {
            var response = await httpClient.PostAsJsonAsync("EncouragementPublication/CreateEncouragement", encouragement);

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements de la publication
                publicationVue.NombreEncouragements++;
                publicationVue.IsEncourager = true; // Met à jour l'état d'encouragement de la publication
                StateHasChanged(); // Re-render le composant
            }
            else
            {
                error = "Erreur lors de l'ajout de l'encouragement à la publication.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    private async Task SupprimerNombreEncouragement()
    {
        // Utilisez l'ID de l'encouragement à supprimer (assurez-vous d'avoir cet ID disponible)
        int publicationId = publicationVue.PublicationsId; // Remplacez par l'ID de l'encouragement que vous souhaitez supprimer

        try
        {
            var response = await httpClient.DeleteAsync($"EncouragementPublication/DeleteEncouragement/{publicationId}/{utilisateurId}");

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements de la publication
                publicationVue.NombreEncouragements--;
                publicationVue.IsEncourager = false; // Met à jour l'état d'encouragement de la publication
                StateHasChanged(); // Re-render le composant
            }
            else
            {
                error = "Erreur lors de la suppression de l'encouragement à la publication.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    private async Task DeletePublication()
    {
        var confirmation = await dialog.ShowAsync(
          title: "Etes vous sur de vouloir supprimer cette publication ?",
          message1: $"La publication : {publicationVue.Contenu} ");
        if (confirmation)
        {
            await SupprimerPublication();
        }
    }
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task SupprimerPublication()
    {
        // Utilisez l'ID de la publication à supprimer (assurez-vous d'avoir cet ID disponible)
        int publicationId = publicationVue.PublicationsId; 

        try
        {
            var response = await httpClient.DeleteAsync($"Publication/DeletePublication/{publicationId}");

            if (response.IsSuccessStatusCode)
            {
                foreach(string url in publicationVue.MediaUrls)
                {
                    string mediaType = GetMediaTypeFromUrl(url);
                    string nomDuFichier = Path.GetFileName(new Uri(url).AbsolutePath);
                    try
                    {
                        await httpClient.DeleteAsync($"http://localhost:5400/ApiImageSportTogether/Images/DeleteMedia/{mediaType}/{nomDuFichier}");

                    }catch(Exception ex)
                    {

                    }

                }

                await OnDelete.InvokeAsync(publicationId);


            }
            else
            {
                error = "Erreur lors de la suppression de l'encouragement à la publication.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }
    /// <summary>
    /// 
    /// </summary>

    /// <returns></returns>
    private async Task ModifierPublication()
    {
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        // Utilisez l'ID de l'encouragement à supprimer (assurez-vous d'avoir cet ID disponible)
        int publicationId = publicationVue.PublicationsId;
        Publication publication = new()
        {
            PublicationsId = publicationVue.PublicationsId,
            Contenu = publicationVue.Contenu,
            DatePublication = DateTime.Now,
            SportTag = publicationVue.SportTag,
            Visibilite = publicationVue.Visibilite,
            UtilisateurId = publicationVue.UtilisateurId,
            NombreEncouragement = publicationVue.NombreEncouragements
        };
        try
        {
            var response = await httpClient.PutAsJsonAsync($"Publication/UpdatePublication/{publicationId}", publication);
            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new(ToastType.Success, $"Votre publication {publicationVue.Contenu} à bien été modifié."));
            }
            else
            {
                error = response.Content.ToString();
                ToastService.Notify(new(ToastType.Danger, $"{error}"));
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.Write(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    #endregion
    #region "Méthodes"
    private string GetMediaTypeFromUrl(string mediaUrl)
    {
        // Extraire l'extension du fichier à partir de l'URL
        var fileExtension = Path.GetExtension(mediaUrl).ToLower();

        if (imageExtensions.Contains(fileExtension))
        {
            return "image";
        }
        else if (videoExtensions.Contains(fileExtension))
        {
            return "video";
        }
        else
        {
            return "unknown"; // Si l'extension ne correspond ni à une image ni à une vidéo
        }
    }


    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task SwitchChanged()
    {
        publicationVue.Visibilite = !isPublic;
        isPublic = publicationVue.Visibilite;
        await ModifierPublication();
    }
    #endregion


}
