@page "/publication/{PublicationId:int}"
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable
@using SportTogetherBlazor.Models
@using Microsoft.AspNetCore.SignalR.Client



@if (hasError || publicationVue == null)
{
    <p class="text-danger">Erreur lors du chargement de la publication. Veuillez réessayer plus tard. @error</p>
}
else
{


    <div class="card shadow-sm mb-4 col-lg-8 col-sm-12 col-md-10" >
        <div class="card-body p-3">
            <!-- Pseudo et nom utilisateur en haut à gauche -->
            <div class="d-flex align-items-center mb-3">
                <div class="user-info">
                    <img src="@publicationVue.ImageUtilisateurUrl" alt="Image de profil" class="user-image rounded-circle me-2" width="50" />
                    <span class="card-title mb-0">@publicationVue.PseudoUtilisateur</span>
                </div>
            </div>

            <!-- Image -->
            <div class="image-section mb-3">
                @if (publicationVue.MediaUrls != null && publicationVue.MediaUrls.Count > 0)
                {
                    <img src="@publicationVue.MediaUrls[0]" class="img-thumbnail rounded" alt="Image publication" style="max-height: 250px; width: 100%;" />
                }
            </div>

            <!-- Contenu et autres informations épurées -->
            <p class="card-text text-muted">@publicationVue.Contenu</p>

            <div class="d-flex justify-content-between align-items-center">
                <!-- Bouton encouragement -->
                @if (publicationVue.IsEncourager)
                {
                    <Button Color="ButtonColor.None" Class="border border-warning" Type="ButtonType.Button" TooltipTitle="Décourager" @onclick="() => SupprimerNombreEncouragement()" Size="Size.Small">
                        @publicationVue.NombreEncouragements 💪
                    </Button>
                }
                else
                {
                    <Button Color="ButtonColor.None" Type="ButtonType.Button" TooltipTitle="Encourager" @onclick="() => AjoutNombreEncouragement()" Size="Size.Small">
                        @publicationVue.NombreEncouragements 💪
                    </Button>
                }

                <!-- Date de publication -->
                <small class="text-muted">@publicationVue.DatePublication.ToShortDateString()</small>
            </div>
        </div>

        <!-- Section des commentaires -->
        <div class="card-footer bg-white">
            @if (publicationVue.Commentaires != null && publicationVue.Commentaires.Count > 0)
            {
                <ul class="list-unstyled">
                    @foreach (var commentaire in publicationVue.Commentaires)
                    {
                        <li class="border-bottom pb-2 mb-2">
                            <div class="d-flex align-items-center">
                                <img src="@commentaire.ImageUtilisateurUrl" class="rounded-circle me-2" width="35" height="35" alt="Image utilisateur" />
                                <strong>@commentaire.PseudoUtilisateur</strong>
                            </div>
                            <p class="small text-muted mb-0">@commentaire.Contenu</p>
                            <small class="text-muted">@commentaire.DateCommentaire.ToShortDateString()</small>
                            @if (commentaire.IsEncouragerCom)
                            {
                                <Button Color="ButtonColor.None" Class="border border-warning" Type="ButtonType.Button" TooltipTitle="Décourager" @onclick="() => SupprimerNombreEncouragementCommentaire(commentaire)" Size="Size.Small">
                                    @commentaire.NombreEncouragementCommentaire  💪
                                </Button>
                            }
                            else
                            {
                                <Button Color="ButtonColor.None" Type="ButtonType.Button" TooltipTitle="Encourager" @onclick="() => AjoutNombreEncouragementCommentaire(commentaire)" Size="Size.Small">
                                    @commentaire.NombreEncouragementCommentaire 💪
                                </Button>
                            }
                           
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">Aucun commentaire pour cette publication.</p>
            }

            <!-- Ajouter un commentaire -->
            <div class="mt-3">
                <h6>Ajouter un commentaire</h6>
                <EditForm Model="@newCommentaire" OnValidSubmit="@AddCommentaire">
                    <DataAnnotationsValidator />
                    <div class="input-group">
                        <InputText @bind-Value="newCommentaire.Contenu" class="form-control" placeholder="Votre commentaire..." />
                        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" ><Icon Name="IconName.AirplaneFill"/></Button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
   
}
@code {
    [Parameter] public int PublicationId { get; set; }
    private PublicationVue? publicationVue = null;
    private bool isLoading = true;
    private bool hasError = false;
    private HttpClient httpClient;
    private string error;
    private PublicationCommentaire newCommentaire = new PublicationCommentaire();
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await FetchPublicationDetails(PublicationId);
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/publicationHub")
            .Build();

        // Écouter l'ajout d'un commentaire
        _hubConnection.On<int>("ReceiveCommentAdded", async (commentaireId) =>
        {
            var commentaire = await FetchCommentaireById(commentaireId);
            if (commentaire != null)
            {
                publicationVue.Commentaires.Add(commentaire);
                StateHasChanged(); // Re-render the component
            }
        });

        // Écouter la suppression d'un commentaire
        _hubConnection.On<int>("ReceiveCommentDeleted", async (commentaireId) =>
        {
            // Logique pour supprimer le commentaire de publicationVue.Commentaires
            var commentaire = publicationVue.Commentaires.FirstOrDefault(c => c.CommentaireId == commentaireId);
            if (commentaire != null)
            {
                publicationVue.Commentaires.Remove(commentaire);
                StateHasChanged();
            }
        });

        // Écouter la modification d'une publication
        _hubConnection.On<int>("ReceivePublicationUpdated", async (publicationId) =>
        {
            await FetchPublicationDetails(publicationId);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinPublicationGroup", PublicationId.ToString()); // Rejoindre le groupe

    }
    // Méthode pour récupérer le commentaire par ID
    private async Task<CommentaireVue?> FetchCommentaireById(int commentaireId)
    {
        try
        {
            var response = await httpClient.GetAsync($"PublicationCommentaire/GetCommentaireById/{commentaireId}");
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<CommentaireVue>();
            }
            else
            {
                Console.WriteLine($"Erreur lors de la récupération du commentaire : {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
        return null;
    }
    // Dispose method to stop the SignalR connection
    public void Dispose()
    {
        // Déconnecter de SignalR
        if (_hubConnection != null)
        {
            _hubConnection.SendAsync("LeavePublicationGroup", PublicationId.ToString()); // Quitter le groupe
            _hubConnection.DisposeAsync();
        }

    }


    private async Task FetchPublicationDetails(int publicationId)
    {
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        try
        {
            var response = await httpClient.GetAsync($"Publication/GetPublicationVueById/{publicationId}");
            if (response.IsSuccessStatusCode)
            {
                publicationVue = await response.Content.ReadFromJsonAsync<PublicationVue?>();
            }
            else
            {
                error = response.Content.ToString();
                Console.Write(response.Content.ToString());
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.Write(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddCommentaire()
    {
        newCommentaire.PublicationId = PublicationId;
        newCommentaire.DateCommentaire = DateTime.UtcNow;
        // Remplacez `UtilisateurId` par l'ID de l'utilisateur authentifié
        newCommentaire.UtilisateurId = publicationVue.UtilisateurId;

        var response = await httpClient.PostAsJsonAsync("PublicationCommentaire/CreateCommentaire", newCommentaire);

        if (response.IsSuccessStatusCode)
        {
            var addedCommentaire = await response.Content.ReadFromJsonAsync<PublicationCommentaire>();
            newCommentaire = new PublicationCommentaire(); // Réinitialiser le formulaire
            StateHasChanged(); // Re-render the component
        }
        else
        {
            error = "Erreur lors de l'ajout du commentaire.";
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }


    private async Task AjoutNombreEncouragement()
    {
        EncouragementPublication encouragement = new()
            {
                PublicationId = PublicationId,
                UtilisateurId = publicationVue.UtilisateurId // Remplacez par l'ID de l'utilisateur authentifié
            };

        try
        {
            var response = await httpClient.PostAsJsonAsync("EncouragementPublication/CreateEncouragement", encouragement);

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements de la publication
                publicationVue.NombreEncouragements++;
                publicationVue.IsEncourager = true; // Met à jour l'état d'encouragement de la publication
                StateHasChanged(); // Re-render le composant
            }
            else
            {
                error = "Erreur lors de l'ajout de l'encouragement à la publication.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }
    private async Task AjoutNombreEncouragementCommentaire(CommentaireVue commentaireVue)
    {
        
        EncouragementPublicationCommentaire encouragement = new()
        {
            PublicationCommentaireId = commentaireVue.CommentaireId,
            UtilisateurId = commentaireVue.UtilisateurId
        };
        try
        {
            var response = await httpClient.PostAsJsonAsync($"EncouragementPublicationCommentaire/CreateEncouragementPublicationCommentaire/", encouragement);

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements du commentaire
                var commentaire = publicationVue.Commentaires.FirstOrDefault(c => c.CommentaireId == encouragement.PublicationCommentaireId);
                if (commentaire != null)
                {
                    commentaire.NombreEncouragementCommentaire++;
                    commentaire.IsEncouragerCom = true; // Met à jour l'état d'encouragement du commentaire
                    StateHasChanged(); // Re-render le composant
                }
            }
            else
            {
                error = "Erreur lors de l'ajout de l'encouragement au commentaire.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    private async Task SupprimerNombreEncouragement()
    {
        // Utilisez l'ID de l'encouragement à supprimer (assurez-vous d'avoir cet ID disponible)
        int encouragementId = publicationVue.UtilisateurId; // Remplacez par l'ID de l'encouragement que vous souhaitez supprimer

        try
        {
            var response = await httpClient.DeleteAsync($"EncouragementPublication/{encouragementId}");

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements de la publication
                publicationVue.NombreEncouragements--;
                publicationVue.IsEncourager = false; // Met à jour l'état d'encouragement de la publication
                StateHasChanged(); // Re-render le composant
            }
            else
            {
                error = "Erreur lors de la suppression de l'encouragement à la publication.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    private async Task SupprimerNombreEncouragementCommentaire(CommentaireVue commentaireVue)
    {
        // Utilisez l'ID de l'encouragement à supprimer (assurez-vous d'avoir cet ID disponible)
        int encouragementId = commentaireVue.CommentaireId; // Remplacez par l'ID de l'encouragement que vous souhaitez supprimer

        try
        {
            var response = await httpClient.DeleteAsync($"EncouragementPublicationCommentaire/{encouragementId}");

            if (response.IsSuccessStatusCode)
            {
                // Mise à jour du nombre d'encouragements du commentaire
                var commentaire = publicationVue.Commentaires.FirstOrDefault(c => c.CommentaireId == encouragementId);
                if (commentaire != null)
                {
                    commentaire.NombreEncouragementCommentaire--;
                    commentaire.IsEncouragerCom = false; // Met à jour l'état d'encouragement du commentaire
                    StateHasChanged(); // Re-render le composant
                }
            }
            else
            {
                error = "Erreur lors de la suppression de l'encouragement au commentaire.";
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }


}
