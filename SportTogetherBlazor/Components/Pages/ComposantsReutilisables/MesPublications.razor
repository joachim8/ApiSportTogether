@inject HttpClient Http


@if (publications == null)
{
    <p>Chargement...</p>
}
else if (publications.Count == 0)
{
    <p>Aucune publication trouvée.</p>
}
else
{
    <div class="d-flex justify-content-center flex-wrap">
        @foreach (var publicationId in publications)
        {

            <PublicationCard PublicationId="@publicationId" OnDelete="OnDeletePublication" />

        }
    </div>
}

@code {
    [Parameter] public int utilisateurId { get; set; } 
    private List<int> publications;

    protected override async Task OnInitializedAsync()
    {
        await GetPublicationsIdsByUtilisateur();
    }
    public async Task GetPublicationsIdsByUtilisateur()
    {
        var response = await Http.GetAsync($"Publication/GetPublicationsIdsByUtilisateur/{utilisateurId}");
        if (response.IsSuccessStatusCode)
        {
            publications = await response.Content.ReadFromJsonAsync<List<int>>();
           
        }
        else
        {
            publications = new List<int>(); // En cas d'erreur, on initialise une liste vide
        }
    }
    // Méthode appelée lors de la suppression d'une publication
    private async Task OnDeletePublication(int publicationId)
    {
        // Supprimer la publication de la liste
        publications.Remove(publicationId);

        // Actualiser l'affichage
        await InvokeAsync(StateHasChanged);
    }
  
   
}