 @using SportTogetherBlazor.Models
@inject IHttpClientFactory HttpClientFactory

<Modal @ref="profileModal" title="Profil Utilisateur" IsVerticallyCentered="true">
    <BodyTemplate>
        @if (profilUtilisateurVue != null)
        {
            <section class="w-100 " style="border-radius: .5rem .5rem 0 0; background-color:#9de2ff;">
                <div class="card w-100" >
                    <div class="card-body" style="border-radius: 15px;">
                                <div class="d-flex">
                                    <div class="flex-shrink-0">
                                        <img src="@profilUtilisateurVue.urlProfilImage"
                                             alt="Profile image" class="img-fluid" style="width: 180px; border-radius: 10px;">
                                    </div>
                                    <div class="flex-grow-1 ms-3">
                                        <h5 class="mb-1">@profilUtilisateurVue.Pseudo</h5>
                                        <p class="mb-2 pb-1">@profilUtilisateurVue.Description</p>
                                        <div class="d-flex justify-content-start rounded-3 p-2 mb-2 bg-body-tertiary">
                                            <div>
                                                <p class="small text-muted mb-1">Nombre d'annonces créées</p>
                                                <p class="mb-0">@profilUtilisateurVue.NombreAuteurAnnonce</p>
                                            </div>
                                            <div class="px-3">
                                                <p class="small text-muted mb-1">Nombre d'annonces effectuées</p>
                                                <p class="mb-0">@profilUtilisateurVue.NombreAnnonceEffectuer</p>
                                            </div>
                                            <div>
                                                <p class="small text-muted mb-1">Note moyenne</p>
                                                <p class="mb-0">@profilUtilisateurVue.NoteMoyenneDesAnnonces!.Value.ToString("0.00")</p>
                                            </div>
                                        </div>
                                        <!-- Top 3 Sports Section -->
                                        <div class="d-flex justify-content-start mb-2" style="padding-right:25px;">
                                            @if (profilUtilisateurVue.TopTroisSport != null && profilUtilisateurVue.TopTroisSport.Any())
                                            {
                                                @foreach (var sport in profilUtilisateurVue.TopTroisSport)
                                                {
                                                    <div class="me-2">
                                                        <div class="d-flex align-items-start bg-light border rounded-circle w-100 h-100">
                                                            <Icon Name="IconName.Star" Color="IconColor.Success" Class="m-1"></Icon> 
                                                            @sport
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
            </section>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseModal">Fermer</Button>
    </FooterTemplate>
</Modal>
<Button  Color="ButtonColor.None" @onclick="() => ShowProfileModal()" TooltipTitle="@Auteur" Class="d-flex align-items-center text-dark" Size="Size.Medium">
    <div class="btn-item" style="background-color:rgba(255, 255,255, 0.5);">
        <Icon Name="IconName.Person" Color="IconColor.Dark"></Icon>
        <span>@Auteur</span>
    </div>
    
</Button>
@code {
    private Modal profileModal = default!;
    private ProfilUtilisateurVu profilUtilisateurVue;
    [Parameter] public string Auteur { get; set; }
    [Parameter] public int userId { get; set; }
    [Parameter] public string sport { get; set; }
    private HttpClient httpClient;
    /// <summary>
    /// Initialisation de la page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("ApiSportTogetherClient");
        try
        {
            profilUtilisateurVue = await httpClient.GetFromJsonAsync<ProfilUtilisateurVu>($"Utilisateur/GetProfilUtilisateurByIdParMois/{userId}")!;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Erreur lors de la requête : {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur inattendue : {ex.Message}");
        }

       
    }
    public async Task ShowProfileModal()
    {
      
        await profileModal.ShowAsync();
    }

    private async Task CloseModal()
    {
       await profileModal.HideAsync();
    }
}
 