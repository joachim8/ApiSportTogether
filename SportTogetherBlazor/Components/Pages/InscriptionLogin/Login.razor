@page "/SportTogether/Connexion"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SportTogetherBlazor.Services
@using System.Text.Json
@using SportTogetherBlazor.Models;
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject SessionStorageServices session;
<PageTitle> Connexion | SportTogether</PageTitle>
<section class="vh-100" style="background-color: #13222F;">
    <div class="container h-100">
        <div class="row no-gutters d-flex justify-content-center align-items-center h-100">
            <div class="col col-md-8 col-lg-6 col-xl-5">
                <div class="card" style="border-radius: 1rem;">
                        <div class=" d-flex align-items-center">
                        <div class="card-body text-black d-flex flex-column text-center">
                                <EditForm Model="@loginModel" OnSubmit="@HandleLogin" FormName="LoginForm">
                                
                                <div class="text-center">
                                    <h2 class="fw-bold text-uppercase">
                                        Connexion <a href="https://localhost:7161/SportTogether">
                                            <img src="images/logo-noir.png" class="img-fluid align-self-center" style="width:100px; height:100px;" />
                                        </a>
                                    </h2>
                                </div>
                                    <div class="form-outline mb-4">
                                        <label class="form-label" for="pseudo">Pseudo</label>
                                        <InputText id="pseudo" class="form-control form-control-lg" @bind-Value="loginModel!.Pseudo" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label " for="password" >Mot de passe</label>
                                        <InputText id="password" type="password" class="form-control form-control-lg" @bind-Value="loginModel!.Password" />
                                        
                                    </div>

                                    <div class="pt-1 mb-4">
                                        <button class="btn btn-dark btn-lg btn-block" type="submit">Se Connecter</button>
                                    </div>

                                    <div class="form-check d-flex justify-content-start mb-4">
                                        <input class="form-check-input" type="checkbox" value="" id="rememberMe" />
                                        <label class="form-check-label" for="rememberMe"> Se souvenir de moi </label>
                                    </div>

                                    <a class="small text-muted" href="#!">Mot de passe oublié ?</a>
                                    <p class="mb-5 pb-lg-2" style="color: #2C3B64;">
                                        Vous n'avez pas de compte ? <NavLink href="Inscription" style="color: #2C3B64;">S'inscrire</NavLink>
                                    </p>
                                </EditForm>
                                
                                <Modal @ref="modal" title="@titreErreur" IsVerticallyCentered="true">
                                    <BodyTemplate>
                                        @errorMessage
                                    </BodyTemplate>
                                    <FooterTemplate>
                                        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Ok</Button>
                                    </FooterTemplate>
                                </Modal>
                            </div>
                        </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    [SupplyParameterFromForm(FormName = "LoginForm")]
    public LoginModel? loginModel { get; set; } // Assurez-vous qu'il est instancié.
    protected override void OnInitialized() => loginModel ??= new();
    private bool showErrorModal = false;
    private string errorMessage = "";
    private string titreErreur = "";
    private Modal modal = default!;
    private Utilisateur utilisateur;

    private async Task HandleLogin()
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = false
                    };
                var jsonString = await response.Content.ReadAsStringAsync();
                Utilisateur utilisateurInfo = JsonSerializer.Deserialize<Utilisateur>(jsonString, options)!;
                if (utilisateurInfo.UtilisateursId != 0)
                {
                    try
                    {
                        // Existing login logic
                        session.SaveUserToSession(utilisateurInfo); // This may throw an exception
                        NavigationManager.NavigateTo("SportTogether/Annonces");
                    }
                    catch (Exception ex)
                    {
                        titreErreur = "Erreur de Session";
                        errorMessage = "Une erreur est survenue lors de la gestion de la session. " + ex.Message;
                        showErrorModal = true;
                        await OnShowModalClick();
                    }
                   
                }
                else
                {
                    titreErreur = "L'utilisateur n'a pas été enregistrer";
                    errorMessage = "Une erreur s'est produite lors de la connexion. Veuillez réessayer plus tard.";
                    showErrorModal = true;
                    await OnShowModalClick();
                }




            }
            else
            {
                // Vous pouvez personnaliser le message d'erreur basé sur le statut de la réponse
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    titreErreur = "Le serveur ne répond pas";
                    errorMessage = "Une erreur s'est produite lors de la connexion. Veuillez réessayer plus tard.";

                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    errorMessage = "Mauvais nom d'utilisateur ou mot de passe.";
                    titreErreur = "Erreur d'authentification";
                }
                showErrorModal = true;
                await OnShowModalClick();
            }
        }
        catch (JsonException ex)
        {
            titreErreur = "Le Json a rencontré une exception";
            errorMessage = ex.Message;
            showErrorModal = true;
            await OnShowModalClick();
        }
    }



    public class LoginModel
    {
        public string? Pseudo { get; set; }
        public string? Password { get; set; }

    }
    

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    

}