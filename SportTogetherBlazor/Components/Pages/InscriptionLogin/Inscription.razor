@page "/SportTogether/Inscription"
@inject HttpClient httpClient
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json.Serialization;
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
<PageTitle> Inscription | SportTogether</PageTitle>
<style>
    /* Style pour le conteneur global pour centrer la section */
    body, html {
        height: 100%; /* Nécessaire pour le centrage vertical */
        margin-top: 5px;
        
    }
   
    /* Style de fond personnalisé avec effet flou */
    .gradient-custom-2 {
        /* Adapté aux préférences de couleurs, inspiré par Apple */
        background: rgba(255, 255, 255, 0.7);
        backdrop-filter: blur(30px);
    }

    /* Amélioration de l'ombre pour un effet plus prononcé */
    .shadow-5-strong {
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    }

    /* Assure que la card prend toute la largeur de ses champs */
    .card-registration .card-body {
        padding: 5rem 5rem; /* Ajustez selon la largeur souhaitée */
    }

    /* Adaptations supplémentaires pour améliorer l'alignement et l'espacement */
    .card-registration-2 {
        border-radius: 15px;
    }
    /* Personnalisation spécifique pour les champs de formulaire */
    .form-control, .form-control-lg, .select {
        border-radius: 0.5rem;

    }

    .validField {
        border-color: lawngreen;
    }

    .invalidField {
        background-color: tomato;
    }
</style>
<div class="container-fluid ">
     <section class="row justify-content-center text-center">
        <div class="col-lg-8 col-sm-12 col-md-10">
            <div class="card mx-4 mx-md-5 shadow-5-strong text-white" style="background-color:#085f63  ;backdrop-filter: blur(30px);">
        <div class="card-body py-5 px-md-5">
            <div class="row d-flex justify-content-center">
                <div class="col-lg-8">
                    <div class="text-center">
                        <h2 class="fw-bold mb-5">
                            <a href="https://localhost:7161/SportTogether">
                                <img src="/images/logo-blanc.png" class="img-fluid align-self-center" style="width:100px; height:100px;" />
                            </a>
                           S'inscrire
                        </h2>
                    </div>

                        <EditForm Model="@inscriptionModel" OnValidSubmit="@HandleInscription" FormName="InscriptionForm" autocomplete="off">
                            <DataAnnotationsValidator  />
                        <div class="row">
                            <!-- Colonne de gauche -->
                            <div class="col-md-6">
                                <div class="form-outline  mb-2">
                                    <label class="form-label" for="prenom">Prénom</label>
                                    <InputText id="prenom" class="form-control" @bind-Value="inscriptionModel.Prenom" />
                                    <ValidationMessage For=@(() => inscriptionModel.Prenom) />
                                </div>
                                <div class="form-outline  mb-2">
                                    <label class="form-label" for="nom">Nom</label>
                                    <InputText id="nom" class="form-control" @bind-Value="inscriptionModel.Nom" />
                                        <ValidationMessage For=@(() => inscriptionModel.Nom) />
                                </div>
                                <div class="form-outline mb-2">
                                    <label class="form-label" for="email">Adresse Email</label>
                                    <InputText id="email" class="form-control" @bind-Value="inscriptionModel.Email" />
                                        <ValidationMessage For=@(() => inscriptionModel.Email) />
                                </div>
                                <div class="form-outline  mb-2">
                                        <label class="form-label" for="age">Âge</label>
                                    <InputNumber id="age" class="form-control" @bind-Value="inscriptionModel.Age" min="15" max="100" />
                                        <ValidationMessage For=@(() => inscriptionModel.Age) />
                                </div>
                            </div>

                            <!-- Colonne de droite -->
                            <div class="col-md-6">
                                <div class="form-outline  mb-2">
                                    <label class="form-label" for="pseudo">Pseudo</label>
                                    <InputText id="pseudo" class="form-control" @bind-Value="inscriptionModel.Pseudo" />
                                        <ValidationMessage For=@(() => inscriptionModel.Pseudo) />
                                </div>
                                    <!-- Colonne de droite ou gauche selon votre disposition -->
                                    <div class="form-outline mb-2">
                                        <label class="form-label" for="motDePasse">Mot de passe</label>
                                        <InputText id="motDePasse" type="password" class="form-control" @bind-Value="inscriptionModel.MotDePasse" />
                                        <ValidationMessage For=@(() => inscriptionModel.MotDePasse) />
                                    </div>
                                    <div class="form-outline mb-2">
                                        <label class="form-label" for="confirmationMotDePasse">Confirmer le mot de passe</label>
                                        <InputText id="confirmationMotDePasse" type="password" class="form-control" @bind-Value="inscriptionModel.ConfirmationMotDePasse" />
                                        <ValidationMessage For=@(() => inscriptionModel.ConfirmationMotDePasse) />
                                    </div>

                                <div class="form-outline  mb-2">
                                        <label class="form-label" for="genre">Genre</label>
                                    <InputSelect id="genre" class="form-control" @bind-Value="inscriptionModel.Genre">
                                        <option value="">Sélectionnez votre genre</option>
                                        <option value="Femme">Femme</option>
                                        <option value="Homme">Homme</option>
                                    </InputSelect>
                                </div>
                                <div class="form-outline  mb-2">
                                        <label class="form-label" for="rechercheVille">Ville</label>
                                    <InputText id="rechercheVille" class="form-control"
                                                   @bind-Value="rechercheVille"
                                               @oninput="@(async (ChangeEventArgs e) => await RechercherVilles(e.Value.ToString()))" />
                                    @if (villes.Any())
                                    {
                                        <div class="list-group">
                                            @foreach (var ville in villes)
                                            {
                                                <button type="button" class="list-group-item list-group-item-action"
                                                        @onclick="() => SelectionnerVille(ville)">
                                                    @ville.Nom
                                                </button>
                                            }
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>

                        <!-- Boutons soumettre et réseaux sociaux centrés en bas -->
                        <div class="row">
                            <div class="col-12 d-flex justify-content-center">
                                <button type="submit" class="btn btn-outline-light btn-block mb-2">S'inscrire</button>
                                  
                                <button class="btn btn-outline-info btn-block mb-2 mx-2"><a href="/SportTogether/Connexion" style="text-decoration: none; color:aliceblue">Se connecter</a></button>
                               
                            </div>
                            <div class="col-12 text-center">
                                <p>or sign up with:</p>
                                <button type="button" class="btn btn-link btn-floating mx-1">
                                    <Icon Name="IconName.Google" Color="IconColor.Light" />
                                </button>
                                <button type="button" class="btn btn-link btn-floating mx-1">
                                        <Icon Name="IconName.Apple" Color="IconColor.Light" />
                                </button>
                            </div>
                        </div>
                    </EditForm>
                        
                </div>
            </div>
        </div>
    </div>
    </div>
</section>
    <Modal @ref="modal" title="Sélectionnez vos sports favoris" IsVerticallyCentered="true">
        <BodyTemplate>
            <EditForm Model="@sportsList" OnValidSubmit="@HandleSportsFavorisSubmit" >
                @foreach (var sport in sportsList)
                {
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="sport.IsSelected" />
                        <label class="form-check-label">@sport.Nom</label>
                    </div>
                }
                <Button Color="ButtonColor.Secondary" Type="ButtonType.Submit">Enregistrer</Button>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>

        </FooterTemplate>
    </Modal>
</div>


@code {
    private Modal modal = default!;
    public InscriptionModel inscriptionModel = new InscriptionModel();
    private List<Ville> villes = new List<Ville>();
    private string rechercheVille { get; set; }
    private List<Sport> sportsList = new();
    private bool showModal = false;
    private UtilisateurInfo utilisateurInfo;


    private void SelectionnerVille(Ville ville)
    {
        rechercheVille = ville.Nom;
        villes.Clear(); // Cache les suggestions après la sélection
    }
    public class SportsWrapper
    {
        [JsonPropertyName("$id")]
        public string Id { get; set; }

        [JsonPropertyName("$values")]
        public List<Sport> Sports { get; set; }
    }

    private async Task RechercherVilles(string recherche)
    {
        if (!string.IsNullOrEmpty(recherche) && recherche.Length >= 2) // Pour éviter des requêtes inutiles
        {
            if (!string.IsNullOrEmpty(recherche) && recherche.Length > 1) // Limite les requêtes pour les recherches de 2 caractères ou plus
            {
                try
                {
                    villes = await httpClient.GetFromJsonAsync<List<Ville>>($"https://geo.api.gouv.fr/communes?nom={recherche}&fields=nom,departement&boost=population&limit=5")!;
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    // Gérez les exceptions, par exemple, en affichant un message d'erreur
                    Console.WriteLine($"Erreur lors de la récupération des villes: {ex.Message}");
                }
            }

        }
    }

    private async Task HandleSportsFavorisSubmit()
    {
        var selectedSports = sportsList.Where(s => s.IsSelected).ToList();

        if (selectedSports.Count < 2)
        {
            // Gérez l'erreur : Assurez-vous de notifier l'utilisateur de sélectionner au moins 2 sports
            return;
        }


        foreach (var sport in selectedSports)
        {
            SportFavori sportFavori = new SportFavori
                {
                    SportsId = sport.SportsId,
                    UtilisateursId = utilisateurInfo.UtilisateursId

                };

            var response = await httpClient.PostAsJsonAsync("SportFavori/CreateSportFavori", sportFavori);

            if (response.IsSuccessStatusCode)
            {
            }
            else
            {
                string errorMessage =   await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Pb d'ajout de sport en favori : {errorMessage}");
            }
        }
        NavigationManager.NavigateTo($"SportTogether/Annonces");



    }
    private async Task HandleInscription()
    {
        try
        {

            inscriptionModel.Ville = rechercheVille;
            inscriptionModel.ConfirmationMotDePasse = string.Empty;
            var response = await httpClient.PostAsJsonAsync("Utilisateur/CreateUtilisateur", inscriptionModel);

            if (response.IsSuccessStatusCode)
            {
                // Désérialisez le contenu de la réponse en un objet UtilisateurInfo
                utilisateurInfo = (await response.Content.ReadFromJsonAsync<UtilisateurInfo>())!;

                // Assurez-vous d'ajouter une vérification de nullité ici pour éviter des exceptions
                if (utilisateurInfo != null)
                {
                    // Vous pouvez maintenant accéder aux propriétés de utili
                    Console.WriteLine($"Pseudo de l'utilisateur : {utilisateurInfo.Pseudo}");
                }
                else
                {
                    // Gérer le cas où la désérialisation échoue ou la réponse est vide
                    Console.WriteLine("Erreur lors de la désérialisation de la réponse.");
                }
                await GetListOfSport();
                await OnShowModalClick();

            }
            else
            {
                // La réponse a échoué. Gérez les erreurs ici.
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erreur lors de l'inscription: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            // Une exception a été levée. Gérez l'erreur ici.
            Console.WriteLine($"Exception lors de l'inscription: {ex.Message}");
        }
    }
    private async Task GetListOfSport()
    {
        try
        {

            var response = await httpClient.GetAsync("Sport");

            if (response.IsSuccessStatusCode)
            {
                // Utilisez SportsWrapper pour la désérialisation
                var wrapper = await response.Content.ReadFromJsonAsync<SportsWrapper>();
                sportsList = wrapper?.Sports ?? new List<Sport>();

            }
            else
            {
                // La réponse a échoué. Gérez les erreurs ici.
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erreur lors de l'inscription: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            // Une exception a été levée. Gérez l'erreur ici.
            Console.WriteLine($"Exception lors de l'inscription: {ex.Message}");
        }
    }
    public class InscriptionModel
    {
        [Required(ErrorMessage = "Le prénom est requis.")]
        [StringLength(100, ErrorMessage = "Le prénom ne peut pas dépasser 100 caractères.")]
        public string Prenom { get; set; } = null!;

        [Required(ErrorMessage = "Le nom est requis.")]
        [StringLength(100, ErrorMessage = "Le nom ne peut pas dépasser 100 caractères.")]
        public string Nom { get; set; } = null!;

        [Required(ErrorMessage = "L'adresse email est requise.")]
        [EmailAddress(ErrorMessage = "L'adresse email n'est pas valide.")]
        public string Email { get; set; } = null!;

        [Required(ErrorMessage = "L'âge est requis.")]
        [Range(15, 120, ErrorMessage = "L'âge doit être compris entre 15 et 120 ans.")]
        public int Age { get; set; } 

        [Required(ErrorMessage = "Le pseudo est requis.")]
        [StringLength(100, ErrorMessage = "Le pseudo ne peut pas dépasser 100 caractères.")]
        public string Pseudo { get; set; } = null!;

        [Required(ErrorMessage = "Le genre est requis.")]
        public string Genre { get; set; } = null!;

        public string? Description { get; set; }
        public string? Etat { get; set; }
        // La validation de la ville peut être plus complexe, dépendant de votre logique d'application.
        public string Ville { get; set; } = null!;

        [Required(ErrorMessage = "Le mot de passe est requis.")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,}$", ErrorMessage = "Le mot de passe doit contenir au moins 8 caractères, dont une majuscule, un chiffre, et un caractère spécial.")]
        public string MotDePasse { get; set; } = null!;

        [Required(ErrorMessage = "Le mot de passe est requis.")]
        [Compare("MotDePasse", ErrorMessage = "Les mots de passe ne correspondent pas.")]
        public string ConfirmationMotDePasse { get; set; } = null!;
    }
    public class Ville
    {
        public string Nom { get; set; }
        public string CodeDepartement { get; set; }
    }
    public class Sport
    {
        [JsonPropertyName("SportsId")]
        public int SportsId { get; set; }
        [JsonPropertyName("Nom")]
        public string Nom { get; set; }
        public bool IsSelected { get; set; } = false; // Ajouté pour gérer la sélection dans l'interface utilisateur

    }
    public class SportFavori
    {
        [JsonPropertyName("SportFavoriId")]
        public int SportFavoriId { get; set; }

        [JsonPropertyName("SportsId")]
        public int SportsId { get; set; }

        [JsonPropertyName("UtilisateursId")]
        public int UtilisateursId { get; set; }

    }
    public class UtilisateurInfo
    {
        [JsonPropertyName("UtilisateursId")]
        public int UtilisateursId { get; set; }
        [JsonPropertyName("Pseudo")]
        public string Pseudo { get; set; } = null!;
    }
    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();

    }

    private async Task OnHideModalClick()
    {

        await modal.HideAsync();
    }

}
